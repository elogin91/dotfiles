#!/usr/bin/env node
"use strict";

var _chalk = _interopRequireDefault(require("chalk"));
var _debug = _interopRequireDefault(require("debug"));
var _command = _interopRequireDefault(require("../lib/cli/command"));
var _devEnvironment = require("../lib/constants/dev-environment");
var _devEnvironmentCli = require("../lib/dev-environment/dev-environment-cli");
var _devEnvironmentConfigurationFile = require("../lib/dev-environment/dev-environment-configuration-file");
var _devEnvironmentCore = require("../lib/dev-environment/dev-environment-core");
var _devEnvironmentLando = require("../lib/dev-environment/dev-environment-lando");
var _tracker = require("../lib/tracker");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const debug = (0, _debug.default)('@automattic/vip:bin:dev-environment');
const exampleUsage = 'vip dev-env update';
const usage = 'vip dev-env update';
const examples = [{
  usage: `${exampleUsage} --slug=example-site`,
  description: 'Update or confirm all settings for the local environment named "example-site" in the setup wizard.'
}, {
  usage: `${exampleUsage} --php=8.2 --slug=example-site`,
  description: 'Update the PHP version to 8.2 in the `update` command then enter the setup wizard to update or confirm all other settings.\n' + '       * Configuration options that are set in the `update` command will be skipped in the setup wizard.'
}, {
  usage: `${exampleUsage} --app-code=/Users/example/Desktop/example-app-code --slug=example-site`,
  description: "Update application code to load from a path on the user's local machine for the local environment."
}];
const cmd = (0, _command.default)({
  usage
}).option('slug', 'A unique name for a local environment. Default is "vip-local".', undefined, _devEnvironmentCli.processSlug);
(0, _devEnvironmentCli.addDevEnvConfigurationOptions)(cmd);
cmd.examples(examples);
cmd.argv(process.argv, async (arg, opt) => {
  const slug = await (0, _devEnvironmentCli.getEnvironmentName)(opt);
  const lando = await (0, _devEnvironmentLando.bootstrapLando)();
  (0, _devEnvironmentCli.validateDependencies)(lando);
  const trackingInfo = (0, _devEnvironmentCli.getEnvTrackingInfo)(slug);
  await (0, _tracker.trackEvent)('dev_env_update_command_execute', trackingInfo);
  try {
    const environmentAlreadyExists = await (0, _devEnvironmentCore.doesEnvironmentExist)((0, _devEnvironmentCore.getEnvironmentPath)(slug));
    if (!environmentAlreadyExists) {
      throw new Error(_devEnvironment.DEV_ENVIRONMENT_NOT_FOUND);
    }
    const currentInstanceData = (0, _devEnvironmentCore.readEnvironmentData)(slug);
    debug('Read instance data', currentInstanceData);

    /** @type {InstanceOptions} */
    const preselectedOptions = {
      title: currentInstanceData.wpTitle,
      multisite: currentInstanceData.multisite,
      ...opt
    };
    const configurationFileOptions = await (0, _devEnvironmentConfigurationFile.getConfigurationFileOptions)();
    const thereAreOptionsFromConfigFile = Object.keys(configurationFileOptions).length > 0;
    const finalPreselectedOptions = (0, _devEnvironmentConfigurationFile.mergeConfigurationFileOptions)(preselectedOptions, configurationFileOptions);

    /** @type {InstanceOptions} */
    const defaultOptions = {
      appCode: currentInstanceData.appCode.dir || currentInstanceData.appCode.tag || 'demo',
      muPlugins: currentInstanceData.muPlugins.dir || currentInstanceData.muPlugins.tag || 'demo',
      wordpress: currentInstanceData.wordpress.tag || 'trunk',
      elasticsearch: currentInstanceData.elasticsearch,
      php: currentInstanceData.php || _devEnvironment.DEV_ENVIRONMENT_PHP_VERSIONS[Object.keys(_devEnvironment.DEV_ENVIRONMENT_PHP_VERSIONS)[0]].image,
      mariadb: currentInstanceData.mariadb,
      phpmyadmin: currentInstanceData.phpmyadmin,
      xdebug: currentInstanceData.xdebug,
      mailpit: currentInstanceData.mailpit,
      photon: currentInstanceData.photon,
      mediaRedirectDomain: currentInstanceData.mediaRedirectDomain,
      multisite: false,
      title: ''
    };
    const providedOptions = Object.keys(opt).filter(option => option.length > 1) // Filter out single letter aliases
    .filter(option => !['debug', 'help', 'slug'].includes(option)); // Filter out options that are not related to instance configuration

    const suppressPrompts = providedOptions.length > 0 || thereAreOptionsFromConfigFile;
    const instanceData = await (0, _devEnvironmentCli.promptForArguments)(finalPreselectedOptions, defaultOptions, suppressPrompts, false);
    instanceData.siteSlug = slug;
    await (0, _devEnvironmentCore.updateEnvironment)(lando, instanceData);
    const message = '\n' + _chalk.default.green('âœ“') + ' environment updated. Please start environment again for changes to take effect: ' + _chalk.default.bold(`vip dev-env --slug ${slug} start`);
    console.log(message);
    await (0, _tracker.trackEvent)('dev_env_update_command_success', trackingInfo);
  } catch (error) {
    if ('ENOENT' === error.code) {
      const message = 'Environment was created before update was supported.\n\nTo update environment please destroy it and create a new one.';
      await (0, _devEnvironmentCli.handleCLIException)(new Error(message), 'dev_env_update_command_error', trackingInfo);
    } else {
      await (0, _devEnvironmentCli.handleCLIException)(error, 'dev_env_update_command_error', trackingInfo);
    }
    process.exitCode = 1;
  }
});