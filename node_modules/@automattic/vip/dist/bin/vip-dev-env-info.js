#!/usr/bin/env node
"use strict";

var _debug = _interopRequireDefault(require("debug"));
var _command = _interopRequireDefault(require("../lib/cli/command"));
var _devEnvironmentCli = require("../lib/dev-environment/dev-environment-cli");
var _devEnvironmentCore = require("../lib/dev-environment/dev-environment-core");
var _devEnvironmentLando = require("../lib/dev-environment/dev-environment-lando");
var _tracker = require("../lib/tracker");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const debug = (0, _debug.default)('@automattic/vip:bin:dev-environment');
const exampleUsage = 'vip dev-env info';
const usage = 'vip dev-env info';
const examples = [{
  usage: `${exampleUsage} --slug=example-site`,
  description: 'Retrieve basic information about the local environment named "example-site".'
}, {
  usage: `${exampleUsage} --slug=example-site --extended`,
  description: 'Retrieve a larger amount of information about the local environment named "example-site".'
}, {
  usage: `${exampleUsage} --all`,
  description: 'Retrieve basic information about all local environments.'
}];
(0, _command.default)({
  usage
}).option('slug', 'A unique name for a local environment. Default is "vip-local".', undefined, _devEnvironmentCli.processSlug).option('all', 'Retrieve information about all local environments.').option('extended', 'Retrieve a larger amount of information.').examples(examples).argv(process.argv, async (arg, opt) => {
  let trackingInfo;
  let slug;
  const lando = await (0, _devEnvironmentLando.bootstrapLando)();
  if (opt.all) {
    trackingInfo = {
      all: true
    };
    slug = '';
  } else {
    slug = await (0, _devEnvironmentCli.getEnvironmentName)(opt);
    trackingInfo = (0, _devEnvironmentCli.getEnvTrackingInfo)(slug);
  }
  (0, _devEnvironmentCli.validateDependencies)(lando);
  await (0, _tracker.trackEvent)('dev_env_info_command_execute', trackingInfo);
  debug('Args: ', arg, 'Options: ', opt);
  try {
    const options = {
      extended: Boolean(opt.extended),
      suppressWarnings: true
    };
    if (opt.all) {
      await (0, _devEnvironmentCore.printAllEnvironmentsInfo)(lando, options);
    } else {
      await (0, _devEnvironmentCore.printEnvironmentInfo)(lando, slug, options);
    }
    await (0, _tracker.trackEvent)('dev_env_info_command_success', trackingInfo);
  } catch (error) {
    await (0, _devEnvironmentCli.handleCLIException)(error, 'dev_env_info_command_error', trackingInfo);
    process.exitCode = 1;
  }
});