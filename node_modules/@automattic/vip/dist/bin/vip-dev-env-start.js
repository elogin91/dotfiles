#!/usr/bin/env node
"use strict";

var _debug = _interopRequireDefault(require("debug"));
var _command = _interopRequireDefault(require("../lib/cli/command"));
var _devEnvironmentCli = require("../lib/dev-environment/dev-environment-cli");
var _devEnvironmentCore = require("../lib/dev-environment/dev-environment-core");
var _devEnvironmentLando = require("../lib/dev-environment/dev-environment-lando");
var _tracker = require("../lib/tracker");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const debug = (0, _debug.default)('@automattic/vip:bin:dev-environment');
const exampleUsage = 'vip dev-env start';
const usage = 'vip dev-env start';
const examples = [{
  usage: `${exampleUsage} --slug=example-site`,
  description: 'Start a local environment named "example-site".'
}, {
  usage: `${exampleUsage} --skip-wp-versions-check --slug=example-site`,
  description: 'Skip the prompt to upgrade WordPress to the latest release version and start a local environment with the less recent version of WordPress currently configured.'
}, {
  usage: `${exampleUsage} --skip-rebuild --slug=example-site`,
  description: 'Start only the services of a local environment that are not currently in a running state.'
}, {
  usage: `${exampleUsage} --vscode --slug=example-site`,
  description: 'Start a local environment and generate a Workspace file for developing in Visual Studio Code.'
}];
(0, _command.default)({
  usage
}).option('slug', 'A unique name for a local environment. Default is "vip-local".', undefined, _devEnvironmentCli.processSlug).option('skip-rebuild', 'Only start services that are not in a running state.').option(['w', 'skip-wp-versions-check'], 'Skip the prompt to update WordPress; occurs if the last major release version is not configured.').option('vscode', 'Generate a Visual Studio Code Workspace file.').examples(examples).argv(process.argv, async (arg, opt) => {
  const slug = await (0, _devEnvironmentCli.getEnvironmentName)(opt);
  const lando = await (0, _devEnvironmentLando.bootstrapLando)();
  (0, _devEnvironmentCli.validateDependencies)(lando);
  const startProcessing = new Date();
  const trackingInfo = (0, _devEnvironmentCli.getEnvTrackingInfo)(slug);
  trackingInfo.vscode = Boolean(opt.vscode);
  trackingInfo.docker = lando.config.versions.engine;
  trackingInfo.docker_compose = lando.config.versions.compose;
  trackingInfo.compose_plugin = lando.config.versions.composePlugin;
  await (0, _tracker.trackEvent)('dev_env_start_command_execute', trackingInfo);
  debug('Args: ', arg, 'Options: ', opt);
  const options = {
    skipRebuild: Boolean(opt.skipRebuild),
    skipWpVersionsCheck: Boolean(opt.skipWpVersionsCheck)
  };
  try {
    await (0, _devEnvironmentCore.startEnvironment)(lando, slug, options);
    const processingTime = Math.ceil((new Date() - startProcessing) / 1000); // in seconds
    const successTrackingInfo = {
      ...trackingInfo,
      processing_time: processingTime
    };
    await (0, _tracker.trackEvent)('dev_env_start_command_success', successTrackingInfo);
  } catch (error) {
    await (0, _devEnvironmentCli.handleCLIException)(error, 'dev_env_start_command_error', trackingInfo);
    process.exitCode = 1;
  }
  (0, _devEnvironmentCli.postStart)(slug, {
    openVSCode: Boolean(opt.vscode)
  });
});