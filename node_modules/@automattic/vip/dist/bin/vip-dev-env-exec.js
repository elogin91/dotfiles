#!/usr/bin/env node
"use strict";

var _command = _interopRequireDefault(require("../lib/cli/command"));
var _devEnvironmentCli = require("../lib/dev-environment/dev-environment-cli");
var _devEnvironmentCore = require("../lib/dev-environment/dev-environment-core");
var _devEnvironmentLando = require("../lib/dev-environment/dev-environment-lando");
var _tracker = require("../lib/tracker");
var _userError = _interopRequireDefault(require("../lib/user-error"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const exampleUsage = 'vip dev-env exec';
const usage = 'vip dev-env exec';
const examples = [{
  usage: `${exampleUsage} --slug=example-site -- wp post list`,
  description: 'Run a WP-CLI command against a local environment named "example-site".\n' + '      * A double dash ("--") must separate the arguments of "vip" from those of the "wp" command.'
}, {
  usage: `${exampleUsage} --slug=example-site -- wp user list --url=example.example-site.vipdev.lndo.site`,
  description: 'Target the WP-CLI command against the network site "example.example-site.vipdev.lndo.site" of a local multisite environment.'
}, {
  usage: `${exampleUsage} --slug=example-site -- wp shell`,
  description: 'Run the WP-CLI command "wp shell" against a local environment to open an interactive PHP console.'
}];
(0, _command.default)({
  wildcardCommand: true,
  usage
}).option('slug', 'A unique name for a local environment. Default is "vip-local".', undefined, _devEnvironmentCli.processSlug).option('force', 'Skip validation for a local environment to be in a running state.', undefined, _devEnvironmentCli.processBooleanOption).option('quiet', 'Suppress informational messages.', undefined, _devEnvironmentCli.processBooleanOption).examples(examples).argv(process.argv, async (unmatchedArgs, opt) => {
  const slug = await (0, _devEnvironmentCli.getEnvironmentName)(opt);
  const lando = await (0, _devEnvironmentLando.bootstrapLando)();
  (0, _devEnvironmentCli.validateDependencies)(lando);
  const trackingInfo = (0, _devEnvironmentCli.getEnvTrackingInfo)(slug);
  await (0, _tracker.trackEvent)('dev_env_exec_command_execute', trackingInfo);
  try {
    // to avoid confusion let's enforce -- as a splitter for arguments for this command and wp itself
    const argSplitterIx = process.argv.findIndex(argument => '--' === argument);
    const argSplitterFound = argSplitterIx > -1;
    if (unmatchedArgs.length > 0 && !argSplitterFound) {
      throw new Error('A double dash ("--") must separate the arguments of "vip" from those of the "wp" command. Run "vip dev-env exec --help" for examples.');
    }

    /** @type {string[]} */
    let arg = [];
    if (argSplitterFound && argSplitterIx + 1 < process.argv.length) {
      arg = process.argv.slice(argSplitterIx + 1);
    }
    if (!opt.force) {
      const isUp = await (0, _devEnvironmentLando.isEnvUp)(lando, (0, _devEnvironmentCore.getEnvironmentPath)(slug));
      if (!isUp) {
        throw new _userError.default('A WP-CLI command can only be executed on a running local environment.');
      }
    }
    try {
      await (0, _devEnvironmentCore.exec)(lando, slug, arg, {
        stdio: 'inherit'
      });
    } catch (error) {
      if (error instanceof _userError.default) {
        throw error;
      }

      // Unfortunately, we are unable to get the exit code from Lando :-(
      process.exitCode = 1;
    }
    await (0, _tracker.trackEvent)('dev_env_exec_command_success', trackingInfo);
  } catch (error) {
    await (0, _devEnvironmentCli.handleCLIException)(error, 'dev_env_exec_command_error', trackingInfo);
    process.exitCode = 1;
  }
});