#!/usr/bin/env node
"use strict";

var _chalk = _interopRequireDefault(require("chalk"));
var _graphqlTag = _interopRequireDefault(require("graphql-tag"));
var _api = _interopRequireDefault(require("../lib/api"));
var _command = _interopRequireDefault(require("../lib/cli/command"));
var exit = _interopRequireWildcard(require("../lib/cli/exit"));
var _mediaFileImport = require("../lib/media-import/media-file-import");
var _progress = require("../lib/media-import/progress");
var _status = require("../lib/media-import/status");
var _tracker = require("../lib/tracker");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// eslint-disable-next-line no-duplicate-imports

const appQuery = `
	id,
	name,
	type,
	environments{
		id
		appId
		type
		name
		primaryDomain {
			id
			name
		}
	}
`;
const ABORT_IMPORT_MUTATION = (0, _graphqlTag.default)`
	mutation AbortMediaImport($input: AppEnvironmentAbortMediaImportInput) {
		abortMediaImport(input: $input) {
			applicationId
			environmentId
			mediaImportStatusChange {
				importId
				siteId
				statusFrom
				statusTo
			}
		}
	}
`;
(0, _command.default)({
  appContext: true,
  appQuery,
  envContext: true,
  requiredArgs: 0,
  requireConfirm: `
${_chalk.default.red.bold("By running this command, the Media Import running on your App will stop and can't be resumed.")}
${_chalk.default.red.bold('Are you sure you want to abort this Media Import?')}
`
}).argv(process.argv, async (arg, {
  app,
  env
}) => {
  const {
    id: envId,
    appId
  } = env;
  const track = _tracker.trackEventWithEnv.bind(null, appId, envId);
  if (!(0, _mediaFileImport.isSupportedApp)(app)) {
    await track('import_media_command_error', {
      errorType: 'unsupported-app'
    });
    exit.withError('The type of application you specified does not currently support Media imports.');
  }
  const api = (0, _api.default)();
  await track('import_media_abort_execute');
  const progressTracker = new _progress.MediaImportProgressTracker([]);
  progressTracker.prefix = `
=============================================================
Aborting the Media Import running on your App
`;
  try {
    await api.mutate({
      mutation: ABORT_IMPORT_MUTATION,
      variables: {
        input: {
          applicationId: app.id,
          environmentId: env.id
        }
      }
    });
    await (0, _status.mediaImportCheckStatus)({
      app,
      env,
      progressTracker
    });
  } catch (error) {
    if (error.graphQLErrors) {
      for (const err of error.graphQLErrors) {
        console.log(_chalk.default.red('Error:'), err.message);
      }
      return;
    }
    await track('import_media_abort_execute_error', {
      error: `Error: ${error.message}`
    });
  }
});