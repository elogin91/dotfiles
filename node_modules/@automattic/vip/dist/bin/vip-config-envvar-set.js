#!/usr/bin/env node
"use strict";

exports.__esModule = true;
exports.setEnvVarCommand = setEnvVarCommand;
var _chalk = _interopRequireDefault(require("chalk"));
var _command = _interopRequireDefault(require("../lib/cli/command"));
var _format = require("../lib/cli/format");
var _api = require("../lib/envvar/api");
var _input = require("../lib/envvar/input");
var _logging = require("../lib/envvar/logging");
var _readFile = require("../lib/envvar/read-file");
var _tracker = require("../lib/tracker");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const baseUsage = 'vip config envvar set';
const exampleUsage = 'vip @example-app.develop config envvar set';
const NEW_RELIC_ENVVAR_KEY = 'NEW_RELIC_LICENSE_KEY';

// Command examples
const examples = [{
  usage: `${exampleUsage} MY_VARIABLE`,
  description: 'Add or update the environment variable "MY_VARIABLE" and assign its value at the prompt.'
}, {
  usage: `${exampleUsage} MULTILINE_ENV_VAR --from-file=envvar-value.txt`,
  description: 'Add or update the environment variable "MULTILINE_ENV_VAR" and assign the multiline contents of local file envvar-value.txt as its value.'
}];
async function setEnvVarCommand(arg, opt) {
  // Help the user by uppercasing input.
  const name = arg[0].trim().toUpperCase();
  const trackingParams = {
    app_id: opt.app.id,
    command: `${baseUsage} ${name}`,
    env_id: opt.env.id,
    from_file: Boolean(opt.fromFile),
    org_id: opt.app.organization.id,
    skip_confirm: Boolean(opt.skipConfirmation),
    variable_name: name
  };
  const envName = opt.env.type;
  const appName = opt.app.name;
  if (!opt.skipConfirmation && envName === 'production') {
    const yes = await (0, _input.confirm)(`Are you sure you want to set the environment variable ${name} on ${(0, _format.formatEnvironment)(envName)} for site ${appName}?`);
    if (!yes) {
      (0, _tracker.trackEvent)('wpcli_confirm_cancel', trackingParams).catch(() => {});
      console.log('Command cancelled');
      process.exit();
    }
  }
  (0, _logging.debug)(`Request: Set environment variable ${JSON.stringify(name)} for ${(0, _logging.getEnvContext)(opt.app, opt.env)}`);
  await (0, _tracker.trackEvent)('envvar_set_command_execute', trackingParams);
  if (!(0, _api.validateNameWithMessage)(name)) {
    await (0, _tracker.trackEvent)('envvar_set_invalid_name', trackingParams);
    process.exit(1);
  }
  if (NEW_RELIC_ENVVAR_KEY === name) {
    await (0, _tracker.trackEvent)('envvar_set_newrelic_key', trackingParams);
    console.log(_chalk.default.bold.red('Setting the New Relic key is not permitted.'), 'If you want to set your own New Relic key, please contact WordPress VIP support.');
    process.exit(1);
  }
  let value;
  if (opt.fromFile) {
    value = await (0, _readFile.readVariableFromFile)(opt.fromFile);
  } else {
    console.log(`For multiline input, use the ${_chalk.default.bold('--from-file')} option.`);
    console.log();
    value = await (0, _input.promptForValue)(`Enter the value for ${name}:`).catch(async () => {
      await (0, _tracker.trackEvent)('envvar_set_user_cancelled_input', trackingParams);
      (0, _input.cancel)();
    });
  }
  if (!opt.skipConfirmation) {
    // Print input if it was loaded from file.
    if (opt.fromFile) {
      console.log('===== Received value printed below =====');
      console.log(value);
      console.log('===== Received value printed above =====');
      console.log();
    }
    if (!(await (0, _input.confirm)(`Please ${_chalk.default.bold('confirm')} the input value above`))) {
      await (0, _tracker.trackEvent)('envvar_set_user_cancelled_confirmation', trackingParams);
      (0, _input.cancel)();
    }
  }
  await (0, _api.setEnvVar)(opt.app.id, opt.env.id, name, value).catch(async err => {
    await (0, _tracker.trackEvent)('envvar_set_mutation_error', {
      ...trackingParams,
      error: err.message
    });
    throw err;
  });
  await (0, _tracker.trackEvent)('envvar_set_command_success', trackingParams);
  console.log(_chalk.default.green(`Successfully set environment variable ${JSON.stringify(name)}`));
  if (!opt.skipConfirmation) {
    console.log(_chalk.default.bgYellow(_chalk.default.bold('Important:')), 'Updates to environment variables will not be available until the applicationâ€™s next deploy.');
  }
}
(0, _command.default)({
  appContext: true,
  appQuery: _api.appQuery,
  envContext: true,
  requiredArgs: 1,
  usage: `${baseUsage} <VARIABLE_NAME>`
}).option('from-file', 'Read environment variable value from file (useful for multiline input)').option('skip-confirmation', 'Skip manual confirmation of input (USE WITH CAUTION)', false).examples(examples).argv(process.argv, setEnvVarCommand);