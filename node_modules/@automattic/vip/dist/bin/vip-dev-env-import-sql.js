#!/usr/bin/env node
"use strict";

var _devEnvImportSql = require("../commands/dev-env-import-sql");
var _command = _interopRequireDefault(require("../lib/cli/command"));
var _database = require("../lib/database");
var _devEnvironmentCli = require("../lib/dev-environment/dev-environment-cli");
var _tracker = require("../lib/tracker");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const exampleUsage = 'vip dev-env import sql';
const usage = 'vip dev-env import sql';
const examples = [{
  usage: `${exampleUsage} /Users/example/Downloads/file.sql --slug="example-site"`,
  description: 'Import the SQL file named "file.sql" from a path on the user\'s local machine to a running local environment named "example-site".'
}, {
  usage: `${exampleUsage} /Users/example/Downloads/file.sql --search-replace="example-site.com,example-site.vipdev.lndo.site" --slug="example-site"`,
  description: 'Search for the string "example-site.com" in the SQL file and replace it with "example-site.vipdev.lndo.site" during the import.'
}, {
  usage: `${exampleUsage} /Users/example/Downloads/file.sql --search-replace="example-site.com,example-site.vipdev.lndo.site" --skip-reindex --slug="example-site"`,
  description: 'Import the SQL file to a local environment with Elasticsearch enabled, and do not reindex after the import is completed.'
}, {
  usage: `${exampleUsage} /Users/example/Downloads/file.sql --search-replace="example-site.com,example-site.vipdev.lndo.site" --in-place`,
  description: 'Perform the search and replace operation on the local SQL file ("file.sql"), save the changes, and import the updated file to the local environment.'
}, {
  usage: `${exampleUsage} /Users/example/Downloads/file.sql --search-replace="example-site.com/site-three,site-three.example-site.vipdev.lndo.site" --search-replace="example-site.com,example-site.vipdev.lndo.site" --slug="example-site"`,
  description: 'Search and replace 2 pairs of strings during the import of the SQL file to a local multisite environment.'
}];
(0, _command.default)({
  requiredArgs: 1,
  usage
}).option('slug', 'A unique name for a local environment. Default is "vip-local".', undefined, _devEnvironmentCli.processSlug).option(['r', 'search-replace'], 'Search for a string in the SQL file and replace it with a new string.').option('in-place', 'Perform a search and replace operation on the local SQL file and save the results.').option('skip-validate', 'Skip file validation.').option(['k', 'skip-reindex'], 'Skip Elasticsearch reindex after import.').option('quiet', 'Skip confirmation and suppress informational messages.').examples(examples).argv(process.argv, async (unmatchedArgs, opt) => {
  const [fileName] = unmatchedArgs;
  const slug = await (0, _devEnvironmentCli.getEnvironmentName)(opt);
  if (opt.searchReplace && !Array.isArray(opt.searchReplace)) {
    opt.searchReplace = [opt.searchReplace];
  }
  const cmd = new _devEnvImportSql.DevEnvImportSQLCommand(fileName, opt, slug);
  const dumpDetails = await (0, _database.getSqlDumpDetails)(fileName);
  const trackingInfo = (0, _devEnvironmentCli.getEnvTrackingInfo)(cmd.slug);
  const trackerFn = (0, _tracker.makeCommandTracker)('dev_env_import_sql', {
    ...trackingInfo,
    sqldump_type: dumpDetails.type
  });
  await trackerFn('execute');
  try {
    await cmd.run();
    await trackerFn('success');
  } catch (error) {
    await (0, _devEnvironmentCli.handleCLIException)(error);
    await trackerFn('error', {
      message: error.message,
      stack: error.stack
    });
    process.exitCode = 1;
  }
});