#!/usr/bin/env node
"use strict";

var _debug = _interopRequireDefault(require("debug"));
var _command = _interopRequireDefault(require("../lib/cli/command"));
var exit = _interopRequireWildcard(require("../lib/cli/exit"));
var _searchAndReplace = require("../lib/search-and-replace");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const debug = (0, _debug.default)('@automattic/vip:bin:vip-search-replace');

// Command examples
const examples = [
// `search-replace` flag
{
  usage: 'vip search-replace <file.sql> --search-replace="from,to"',
  description: 'Replace instances of <from> with <to> in the provided <file.sql>\n' + '       * Ensure there are no spaces between your search-replace parameters'
},
// `in-place` flag
{
  usage: 'vip search-replace <file.sql> --search-replace="from,to" --in-place',
  description: 'Perform Search and Replace explicitly on the provided input <file.sql> file'
},
// `output` flag
{
  usage: 'vip search-replace <file.sql> --search-replace="from,to" --output="<output.sql>"',
  description: 'Search and Replace to the specified output <output.sql> file\n' + '       * Has no effect when the `in-place` flag is used'
}];
(0, _command.default)({
  requiredArgs: 1
}).option('search-replace', 'Specify the <from> and <to> pairs to be replaced').option('in-place', 'Perform the search and replace explicitly on the input file').option('output', 'Specify the replacement output file for Search and Replace').examples(examples).argv(process.argv, async (arg, opt) => {
  // TODO: tracks event for usage of this command stand alone
  const {
    searchReplace,
    inPlace,
    output
  } = opt;
  debug('Args: ', arg, 'searchReplace: ', searchReplace);
  const filename = arg[0];
  if (!arg && !filename) {
    exit.withError('You must pass in a filename');
  }
  if (!searchReplace || !searchReplace.length) {
    exit.withError('You must provide a pair of strings (separated by comma) such as original,replacement');
  }
  const isImport = false;
  await (0, _searchAndReplace.searchAndReplace)(filename, searchReplace, {
    isImport,
    inPlace,
    output
  });
});