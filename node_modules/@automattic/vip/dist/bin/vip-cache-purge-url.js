#!/usr/bin/env node
"use strict";

exports.__esModule = true;
exports.cachePurgeCommand = cachePurgeCommand;
var _cachePurge = require("../lib/api/cache-purge");
var _command = _interopRequireDefault(require("../lib/cli/command"));
var exit = _interopRequireWildcard(require("../lib/cli/exit"));
var _readFile = require("../lib/read-file");
var _tracker = require("../lib/tracker");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const usage = 'vip cache purge-url';
const exampleUsage = 'vip @example-app.develop cache purge-url';
const examples = [{
  usage: `${exampleUsage} https://example-app-develop.go-vip.co/sample-page/` + '\n    - Purged URL: https://example-app.develop.go-vip.co/sample-page/',
  description: 'Purge the page cache for a single URL.'
}, {
  usage: `${exampleUsage} --from-file=./urls.txt`,
  description: 'Purge the page cache for multiple URLs, each listed on a single line in a local file.'
}];
async function cachePurgeCommand(urls = [], opt = {}) {
  const trackingParams = {
    app_id: opt.app.id,
    command: 'vip cache purge-url',
    env_id: opt.env.id,
    from_file: Boolean(opt.fromFile)
  };
  await (0, _tracker.trackEvent)('cache_purge_url_command_execute', trackingParams);
  if (opt.fromFile) {
    const value = await (0, _readFile.readFromFile)(opt.fromFile);
    if (value) {
      urls = value.split('\n').map(url => url.trim());
    }
  }
  if (!urls.length) {
    await (0, _tracker.trackEvent)('cache_purge_url_command_error', {
      ...trackingParams,
      error: 'No URL provided'
    });
    exit.withError('Please supply at least one URL.');
  }
  let purgeCacheObject = {};
  try {
    purgeCacheObject = await (0, _cachePurge.purgeCache)(opt.app.id, opt.env.id, urls);
  } catch (err) {
    await (0, _tracker.trackEvent)('cache_purge_url_command_error', {
      ...trackingParams,
      error: err.message
    });
    exit.withError(`Failed to purge URL(s) from page cache: ${err.message}`);
  }
  await (0, _tracker.trackEvent)('cache_purge_url_command_success', trackingParams);
  purgeCacheObject.urls.forEach(url => {
    console.log(`- Purged URL: ${url}`);
  });
}
(0, _command.default)({
  appContext: true,
  appQuery: _cachePurge.appQuery,
  envContext: true,
  wildcardCommand: true,
  usage
}).option('from-file', 'Read one or more URLs from a file, each listed on a single line.').examples(examples).argv(process.argv, cachePurgeCommand);