#!/usr/bin/env node
"use strict";

var _debug = _interopRequireDefault(require("debug"));
var _command = _interopRequireDefault(require("../lib/cli/command"));
var _devEnvironmentCli = require("../lib/dev-environment/dev-environment-cli");
var _devEnvironmentCore = require("../lib/dev-environment/dev-environment-core");
var _devEnvironmentLando = require("../lib/dev-environment/dev-environment-lando");
var _tracker = require("../lib/tracker");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const debug = (0, _debug.default)('@automattic/vip:bin:dev-environment');
const exampleUsage = 'vip dev-env shell';
const usage = 'vip dev-env shell';
const userMap = {
  nginx: 'www-data',
  php: 'www-data',
  database: 'mysql',
  memcached: 'memcache',
  elasticsearch: 'elasticsearch',
  phpmyadmin: 'www-data',
  mailpit: 'root',
  photon: 'root'
};
const examples = [{
  usage: `${exampleUsage} --slug=example-site`,
  description: 'Create and enter an SSH command shell for the PHP service (default) of the local environment named "example-site".'
}, {
  usage: `${exampleUsage} --root --slug=example-site`,
  description: 'Create and enter an SSH command shell with root privileges for the local environment.'
}, {
  usage: `${exampleUsage} --slug=example-site -- ls -lha`,
  description: 'Create an SSH command shell for the local environment and run the command "ls -lha".\n' + '      * A double dash ("--") must separate the arguments of "vip" from those of the command.'
}, {
  usage: `${exampleUsage} --service=database --slug=example-site -- ls -lha`,
  description: 'Create an SSH command shell for the database service of the local environment and run the command "ls -lha".'
}];

/**
 * @param {string[]} args
 * @return {string[]}
 */
function getCommand(args) {
  const splitterIdx = process.argv.findIndex(argument => '--' === argument);
  if (args.length > 0 && splitterIdx === -1) {
    throw new Error('A double dash ("--") must separate the arguments of "vip" from those of the command to be executed. Run "vip dev-env shell --help" for examples.');
  }

  /** @type {string[]} */
  let cmd = [];
  if (splitterIdx !== -1 && splitterIdx + 1 < process.argv.length) {
    cmd = process.argv.slice(splitterIdx + 1);
  }
  return cmd;
}
(0, _command.default)({
  wildcardCommand: true,
  usage
}).option('slug', 'A unique name for a local environment. Default is "vip-local".', undefined, _devEnvironmentCli.processSlug).option('root', 'Create with root privileges.').option('service', 'Restrict to a single service.').examples(examples).argv(process.argv, async (args, opt) => {
  const slug = await (0, _devEnvironmentCli.getEnvironmentName)(opt);
  const lando = await (0, _devEnvironmentLando.bootstrapLando)();
  (0, _devEnvironmentCli.validateDependencies)(lando);
  const trackingInfo = (0, _devEnvironmentCli.getEnvTrackingInfo)(slug);
  await (0, _tracker.trackEvent)('dev_env_shell_command_execute', trackingInfo);
  debug('Args: ', args, 'Options: ', opt);
  const isRoot = Boolean(opt.root);
  const service = opt.service || 'php';
  const user = isRoot ? 'root' : userMap[service] || 'www-data';
  const cmd = getCommand(args);
  try {
    await (0, _devEnvironmentLando.landoShell)(lando, (0, _devEnvironmentCore.getEnvironmentPath)(slug), service, user, cmd);
    await (0, _tracker.trackEvent)('dev_env_shell_command_success', trackingInfo);
  } catch (error) {
    // error.hide comes from Lando to  between normal errors and non-zero exit code from commands.
    // We don't want to track the latter as errors.
    if (!error.hide) {
      await (0, _devEnvironmentCli.handleCLIException)(error, 'dev_env_shell_command_error', trackingInfo);
      process.exitCode = 1;
    } else {
      await (0, _tracker.trackEvent)('dev_env_shell_command_success', trackingInfo);
    }
  }
});