#!/usr/bin/env node
"use strict";

exports.__esModule = true;
exports.listEnvVarsCommand = listEnvVarsCommand;
var _chalk = _interopRequireDefault(require("chalk"));
var _command = _interopRequireDefault(require("../lib/cli/command"));
var _format = require("../lib/cli/format");
var _api = require("../lib/envvar/api");
var _logging = require("../lib/envvar/logging");
var _tracker = require("../lib/tracker");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const usage = 'vip config envvar list';
const exampleUsage = 'vip @example-app.develop config envvar list';

// Command examples
const examples = [{
  usage: exampleUsage,
  description: 'List the names of all environment variables on an environment.'
}];

/**
 * @param {string[]} arg
 * @param {object} opt
 * @return {Promise<void>}
 */
async function listEnvVarsCommand(arg, opt) {
  const trackingParams = {
    app_id: opt.app.id,
    command: usage,
    env_id: opt.env.id,
    format: opt.format,
    org_id: opt.app.organization.id
  };
  (0, _logging.debug)(`Request: list environment variables for ${(0, _logging.getEnvContext)(opt.app, opt.env)}`);
  await (0, _tracker.trackEvent)('envvar_list_command_execute', trackingParams);
  const envvars = await (0, _api.listEnvVars)(opt.app.id, opt.env.id).catch(async err => {
    await (0, _tracker.trackEvent)('envvar_list_query_error', {
      ...trackingParams,
      error: err.message
    });
    throw err;
  });
  await (0, _tracker.trackEvent)('envvar_list_command_success', trackingParams);
  if (0 === envvars.length) {
    console.log(_chalk.default.yellow('There are no environment variables'));
    process.exit();
  }

  // Vary data by expected format.
  let key = 'name';
  if ('keyValue' === opt.format) {
    key = 'key';
  } else if ('ids' === opt.format) {
    key = 'id';
  }

  // Format as an object for formatData.
  const envvarsObject = envvars.map(name => ({
    [key]: name
  }));
  console.log((0, _format.formatData)(envvarsObject, opt.format));
}
(0, _command.default)({
  appContext: true,
  appQuery: _api.appQuery,
  envContext: true,
  format: true,
  usage
}).examples(examples).argv(process.argv, listEnvVarsCommand);