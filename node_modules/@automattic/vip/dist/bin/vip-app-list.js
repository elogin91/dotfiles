#!/usr/bin/env node
"use strict";

var _graphqlTag = _interopRequireDefault(require("graphql-tag"));
var _api = _interopRequireDefault(require("../lib/api"));
var _command = _interopRequireDefault(require("../lib/cli/command"));
var _tracker = require("../lib/tracker");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const baseUsage = 'vip app list';
(0, _command.default)({
  format: true,
  usage: baseUsage
}).examples([{
  usage: baseUsage + '\n' + '    - ┌──────┬─────────────────┬─────────────────────────────────┐\n' + '    - │ id   │ name            │ repo                            │\n' + '    - ┌──────┬─────────────────┬─────────────────────────────────┐\n' + '    - │ 8886 │ example-app     │ wpcomvip/my-org-example-app     │\n' + '    - ┌──────┬─────────────────┬─────────────────────────────────┐\n' + '    - │ 4325 │ mytestmultisite │ wpcomvip/my-org-mytestmultisite │\n' + '    - └──────┴─────────────────┴─────────────────────────────────┘\n',
  description: 'Retrieve a list of applications that can be accessed by the current authenticated VIP-CLI user.'
}]).argv(process.argv, async () => {
  const api = (0, _api.default)();
  await (0, _tracker.trackEvent)('app_list_command_execute');
  let response;
  try {
    response = await api.query({
      query: (0, _graphqlTag.default)`
					query Apps($first: Int, $after: String) {
						apps(first: $first, after: $after) {
							total
							nextCursor
							edges {
								id
								name
								repo
							}
						}
					}
				`,
      variables: {
        first: 100,
        after: null // TODO make dynamic
      }
    });
  } catch (err) {
    const message = err.toString();
    await (0, _tracker.trackEvent)('app_list_command_fetch_error', {
      error: message
    });
    console.log('Failed to fetch apps: %s', message);
    return;
  }
  if (!response || !response.data || !response.data.apps || !response.data.apps.edges || !response.data.apps.edges.length) {
    const message = 'No apps found';
    await (0, _tracker.trackEvent)('app_list_command_fetch_error', {
      error: message
    });
    console.log(message);
    return;
  }
  await (0, _tracker.trackEvent)('app_list_command_success');
  return response.data.apps.edges;
});