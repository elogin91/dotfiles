#!/usr/bin/env node
"use strict";

var _chalk = _interopRequireDefault(require("chalk"));
var _debug = _interopRequireDefault(require("debug"));
var _command = _interopRequireDefault(require("../lib/cli/command"));
var _devEnvironmentCli = require("../lib/dev-environment/dev-environment-cli");
var _devEnvironmentCore = require("../lib/dev-environment/dev-environment-core");
var _devEnvironmentLando = require("../lib/dev-environment/dev-environment-lando");
var _tracker = require("../lib/tracker");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const debug = (0, _debug.default)('@automattic/vip:bin:dev-environment');
const exampleUsage = 'vip dev-env stop';
const usage = 'vip dev-env stop';
const examples = [{
  usage: `${exampleUsage} --slug=example-site`,
  description: 'Stop a local environment named "example-site".'
}, {
  usage: `${exampleUsage} --all`,
  description: 'Stops all local environments.'
}];
(0, _command.default)({
  usage
}).option('slug', 'A unique name for a local environment. Default is "vip-local".', undefined, _devEnvironmentCli.processSlug).option('all', 'Stop all local environments.').examples(examples).argv(process.argv, async (arg, opt) => {
  const lando = await (0, _devEnvironmentLando.bootstrapLando)();
  (0, _devEnvironmentCli.validateDependencies)(lando);
  debug('Args: ', arg, 'Options: ', opt);

  /** @type {Record< string, unknown >} */
  let trackingInfo;
  /** @type {string[]} */
  let environments;
  if (opt.all) {
    trackingInfo = {
      all: true
    };
    environments = (0, _devEnvironmentCore.getAllEnvironmentNames)();
  } else {
    const slug = await (0, _devEnvironmentCli.getEnvironmentName)(opt);
    trackingInfo = (0, _devEnvironmentCli.getEnvTrackingInfo)(slug);
    environments = [slug];
  }
  await (0, _tracker.trackEvent)('dev_env_stop_command_execute', trackingInfo);
  for (const slug of environments) {
    try {
      // eslint-disable-next-line no-await-in-loop
      await (0, _devEnvironmentCore.stopEnvironment)(lando, slug);
      const message = _chalk.default.green('âœ“') + ` environment "${slug}" stopped.\n`;
      console.log(message);
    } catch (error) {
      let err;
      if (!(error instanceof Error)) {
        err = new Error(error?.toString());
      } else {
        err = error;
      }
      process.exitCode = 1;
      const errorTrackingInfo = {
        ...trackingInfo,
        failure: err.message,
        stack: err.stack
      };

      // trackEvent does not throw
      // eslint-disable-next-line no-await-in-loop
      await (0, _tracker.trackEvent)('dev_env_stop_command_error', errorTrackingInfo);
      console.error(_chalk.default.red('Error:'), err.message.replace('ERROR: ', ''));
    }
  }
  if (process.exitCode === 0) {
    await (0, _tracker.trackEvent)('dev_env_stop_command_success', trackingInfo);
  }
});