#!/usr/bin/env node
"use strict";

var _chalk = _interopRequireDefault(require("chalk"));
var _debug = _interopRequireDefault(require("debug"));
var _command = _interopRequireDefault(require("../lib/cli/command"));
var exit = _interopRequireWildcard(require("../lib/cli/exit"));
var _devEnvironmentCli = require("../lib/dev-environment/dev-environment-cli");
var _devEnvironmentConfigurationFile = require("../lib/dev-environment/dev-environment-configuration-file");
var _devEnvironmentCore = require("../lib/dev-environment/dev-environment-core");
var _devEnvironmentLando = require("../lib/dev-environment/dev-environment-lando");
var _tracker = require("../lib/tracker");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const debug = (0, _debug.default)('@automattic/vip:bin:dev-environment');
const exampleUsage = 'vip dev-env create';
const usage = 'vip dev-env create';

// Command examples
const examples = [{
  usage: exampleUsage,
  description: 'Create a new VIP Local Development Environment.\n' + '       * The environment will be named "vip-local" by default if a custom name is not assigned with "--slug" .'
}, {
  usage: `${exampleUsage} --slug=example-site`,
  description: 'Create a new local environment with the unique name "example-site".\n' + '       * Unique names allow multiple local environments to exist simultaneously.'
}, {
  usage: `${exampleUsage} --slug=example-site --multisite=y --php=8.2 --wordpress=6.4`,
  description: 'Create a new local environment configured as a multisite running PHP 8.2 and WordPress version 6.4.\n' + '       * Options that are set in the `create` command will be skipped in the setup wizard.'
}, {
  usage: `vip @example-app.production dev-env create --slug=example-site --app-code=/Users/example/Desktop/example-repo`,
  description: 'Create a new local environment with settings based on the production environment of the "example-app" application and load the locally git-cloned application repository "example-repo".'
}];
const cmd = (0, _command.default)({
  usage
}).option('slug', 'A unique name for a local environment. Default is "vip-local".', undefined, _devEnvironmentCli.processSlug).option('title', 'A descriptive value for the WordPress Site Title. Default is "VIP Dev".').option('multisite', 'Create environment as a multisite. Accepts "y" for a subdomain multisite, "subdirectory" (recommended) for a subdirectory multisite, or "false". Default is "y".', undefined, _devEnvironmentCli.processStringOrBooleanOption);
(0, _devEnvironmentCli.addDevEnvConfigurationOptions)(cmd);
cmd.examples(examples);
cmd.argv(process.argv, async (arg, opt) => {
  const configurationFileOptions = await (0, _devEnvironmentConfigurationFile.getConfigurationFileOptions)();
  const environmentNameOptions = {
    slug: opt.slug,
    app: opt.app,
    env: opt.env,
    allowAppEnv: true
  };
  let slug = _devEnvironmentCli.DEFAULT_SLUG;
  const hasConfiguration = Object.keys(opt).length !== 0 || Object.keys(configurationFileOptions).length > 0;
  if (hasConfiguration) {
    slug = await (0, _devEnvironmentCli.getEnvironmentName)(environmentNameOptions);
  }
  const lando = await (0, _devEnvironmentLando.bootstrapLando)();
  (0, _devEnvironmentCli.validateDependencies)(lando);
  debug('Args: ', arg, 'Options: ', opt);
  const trackingInfo = {
    slug,
    app: opt.app,
    env: opt.env
  };
  await (0, _tracker.trackEvent)('dev_env_create_command_execute', trackingInfo);
  const startCommand = _chalk.default.bold((0, _devEnvironmentCli.getEnvironmentStartCommand)(slug, configurationFileOptions));
  const environmentAlreadyExists = await (0, _devEnvironmentCore.doesEnvironmentExist)((0, _devEnvironmentCore.getEnvironmentPath)(slug));
  if (environmentAlreadyExists) {
    const messageToShow = `Environment already exists\n\n\nTo start the environment run:\n\n${startCommand}\n\n` + `To create another environment use ${_chalk.default.bold('--slug')} option with a unique name.\n`;
    exit.withError(messageToShow);
  }

  /** @type {InstanceOptions} */
  let defaultOptions = {};
  try {
    if (opt.app) {
      const appInfo = await (0, _devEnvironmentCore.getApplicationInformation)(opt.app, opt.env);
      defaultOptions = (0, _devEnvironmentCli.getOptionsFromAppInfo)(appInfo);
    }
  } catch (error) {
    const message = `failed to fetch application "${opt.app}" information`;
    debug(`WARNING: ${message}`, error.message);
    console.log(_chalk.default.yellow('Warning:'), message);
  }
  let preselectedOptions = opt;
  let suppressPrompts = false;
  if (Object.keys(configurationFileOptions).length > 0) {
    // Merge configuration from file
    preselectedOptions = (0, _devEnvironmentConfigurationFile.mergeConfigurationFileOptions)(opt, configurationFileOptions);
    suppressPrompts = true;
  }
  const instanceData = await (0, _devEnvironmentCli.promptForArguments)(preselectedOptions, defaultOptions, suppressPrompts, true);
  instanceData.siteSlug = slug;
  try {
    await (0, _devEnvironmentCore.createEnvironment)(lando, instanceData);
    await (0, _devEnvironmentCore.printEnvironmentInfo)(lando, slug, {
      extended: false,
      suppressWarnings: true
    });
    const message = '\n' + _chalk.default.green('âœ“') + ` environment created.\n\nTo start the environment run:\n\n${startCommand}\n`;
    console.log(message);
    await (0, _tracker.trackEvent)('dev_env_create_command_success', trackingInfo);
  } catch (error) {
    await (0, _devEnvironmentCli.handleCLIException)(error, 'dev_env_create_command_error', trackingInfo);
    process.exitCode = 1;
  }
});