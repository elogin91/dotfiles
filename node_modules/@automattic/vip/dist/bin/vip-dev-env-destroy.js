#!/usr/bin/env node
"use strict";

var _chalk = _interopRequireDefault(require("chalk"));
var _debug = _interopRequireDefault(require("debug"));
var _command = _interopRequireDefault(require("../lib/cli/command"));
var _devEnvironmentCli = require("../lib/dev-environment/dev-environment-cli");
var _devEnvironmentCore = require("../lib/dev-environment/dev-environment-core");
var _devEnvironmentLando = require("../lib/dev-environment/dev-environment-lando");
var _tracker = require("../lib/tracker");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const debug = (0, _debug.default)('@automattic/vip:bin:dev-environment');
const exampleUsage = 'vip dev-env destroy';
const usage = 'vip dev-env destroy';
const examples = [{
  usage: `${exampleUsage} --slug=example-site`,
  description: 'Completely remove a local environment named "example-site" by removing all Docker containers, volumes, and configuration files.'
}, {
  usage: `${exampleUsage} --soft --slug=example-site`,
  description: 'Remove the Docker containers and volumes of a local environment named "example-site" but preserve the configuration files.\n' + '      * The preserved configuration files allow the local environment to be restarted with new Docker containers and volumes.'
}];
(0, _command.default)({
  usage
}).option('slug', 'A unique name for a local environment. Default is "vip-local".', undefined, _devEnvironmentCli.processSlug).option('soft', 'Preserve an environment’s configuration files; allows an environment to be regenerated with the start command.').examples(examples).argv(process.argv, async (arg, opt) => {
  const slug = await (0, _devEnvironmentCli.getEnvironmentName)(opt);
  const lando = await (0, _devEnvironmentLando.bootstrapLando)();
  (0, _devEnvironmentCli.validateDependencies)(lando);
  const trackingInfo = (0, _devEnvironmentCli.getEnvTrackingInfo)(slug);
  await (0, _tracker.trackEvent)('dev_env_destroy_command_execute', trackingInfo);
  debug('Args: ', arg, 'Options: ', opt);
  try {
    const removeFiles = !(opt.soft || false);
    await (0, _devEnvironmentCore.destroyEnvironment)(lando, slug, removeFiles);
    const message = _chalk.default.green('✓') + ' Environment destroyed.\n';
    console.log(message);
    await (0, _tracker.trackEvent)('dev_env_destroy_command_success', trackingInfo);
  } catch (error) {
    await (0, _devEnvironmentCli.handleCLIException)(error, 'dev_env_destroy_command_error', trackingInfo);
    process.exitCode = 1;
  }
});