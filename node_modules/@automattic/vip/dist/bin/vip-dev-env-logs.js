#!/usr/bin/env node
"use strict";

var _debug = _interopRequireDefault(require("debug"));
var _command = _interopRequireDefault(require("../lib/cli/command"));
var _devEnvironmentCli = require("../lib/dev-environment/dev-environment-cli");
var _devEnvironmentCore = require("../lib/dev-environment/dev-environment-core");
var _devEnvironmentLando = require("../lib/dev-environment/dev-environment-lando");
var _tracker = require("../lib/tracker");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const debug = (0, _debug.default)('@automattic/vip:bin:dev-environment');
const exampleUsage = 'vip dev-env logs';
const usage = 'vip dev-env logs';
const examples = [{
  usage: `${exampleUsage} --slug=example-site`,
  description: 'Retrieve logs for all running services of the local environment named "example-site".'
}, {
  usage: `${exampleUsage} --service=elasticsearch --slug=example-site`,
  description: 'Retrieve logs only for the "elasticsearch" service of the local environment named "example-site".'
}, {
  usage: `${exampleUsage} --service=database --follow --slug=example-site`,
  description: 'Retrieve and continually output logs for the "database" service of the local environment named "example-site".'
}];
(0, _command.default)({
  usage
}).option('slug', 'A unique name for a local environment. Default is "vip-local".', undefined, _devEnvironmentCli.processSlug).option(['f', 'follow'], 'Continually output logs as they are generated.').option('service', 'Restrict to a single service.').examples(examples).argv(process.argv, async (arg, opt) => {
  const slug = await (0, _devEnvironmentCli.getEnvironmentName)(opt);
  const lando = await (0, _devEnvironmentLando.bootstrapLando)();
  (0, _devEnvironmentCli.validateDependencies)(lando);
  const trackingInfo = (0, _devEnvironmentCli.getEnvTrackingInfo)(slug);
  await (0, _tracker.trackEvent)('dev_env_logs_command_execute', trackingInfo);
  debug('Args: ', arg, 'Options: ', opt);
  if (!opt.follow) {
    opt.follow = false;
  }
  if (!opt.service) {
    opt.service = false;
  }
  const options = {
    follow: opt.follow,
    service: opt.service,
    timestamps: true
  };
  try {
    await (0, _devEnvironmentCore.showLogs)(lando, slug, options);
    await (0, _tracker.trackEvent)('dev_env_logs_command_success', trackingInfo);
  } catch (error) {
    await (0, _devEnvironmentCli.handleCLIException)(error, 'dev_env_logs_command_error', trackingInfo);
    process.exitCode = 1;
  }
});