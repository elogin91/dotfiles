#!/usr/bin/env node
"use strict";

var _command = _interopRequireDefault(require("../lib/cli/command"));
var _format = require("../lib/cli/format");
var _software = require("../lib/config/software");
var _tracker = require("../lib/tracker");
var _userError = _interopRequireDefault(require("../lib/user-error"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const usage = 'vip config software get <wordpress|php|nodejs|muplugins>';
const exampleUsage = 'vip @example-app.develop config software get';
const exampleUsageNode = 'vip @example-node-app.develop config software get';

// Command examples
const examples = [{
  usage: exampleUsage,
  description: 'Retrieve a list of the current versions of all environment software in the default table format.'
}, {
  usage: `${exampleUsage} --format=csv`,
  description: 'Retrieve a list of the current versions of all environment software in CSV format.'
}, {
  usage: `${exampleUsage} wordpress --include=available_versions`,
  description: 'Retrieve the current version of WordPress for a WordPress environment and a list of available versions in the default table format.'
}, {
  usage: `${exampleUsage} php --include=available_versions`,
  description: 'Retrieve the current version of PHP for a WordPress environment and a list of available versions in the default table format.'
}, {
  usage: `${exampleUsageNode} nodejs --include=available_versions --format=json`,
  description: 'Retrieve the current version of Node.js for a Node.js environment and a list of available versions in JSON format.'
}];
const VALID_INCLUDES = ['available_versions'];
(0, _command.default)({
  appContext: true,
  appQuery: _software.appQuery,
  appQueryFragments: _software.appQueryFragments,
  envContext: true,
  wildcardCommand: true,
  format: true,
  usage
}).option('include', `Retrieve additional data of a specific type. Supported values: ${VALID_INCLUDES.join(',')}`).examples(examples).argv(process.argv, async (arg, opt) => {
  const trackingInfo = {
    environment_id: opt.env?.id,
    args: JSON.stringify(arg)
  };
  await (0, _tracker.trackEvent)('config_software_get_execute', trackingInfo);
  let include = [];
  if (opt.include) {
    if (Array.isArray(opt.include)) {
      include = opt.include;
    } else {
      include = [opt.include];
    }
    const invalidIncludes = include.filter(includeKey => !VALID_INCLUDES.includes(includeKey));
    if (invalidIncludes.length > 0) {
      throw new _userError.default(`Invalid include value(s): ${invalidIncludes.join(',')}`);
    }
  }
  const {
    softwareSettings
  } = opt.env;
  if (softwareSettings === null) {
    throw new _userError.default('Software settings are not supported for this environment.');
  }
  let chosenSettings = [];
  if (arg.length > 0) {
    const component = arg[0];
    if (!softwareSettings[component]) {
      throw new _userError.default(`Software settings for ${component} are not supported for this environment.`);
    }
    chosenSettings = [softwareSettings[component]];
  } else {
    chosenSettings = [softwareSettings.wordpress, softwareSettings.php, softwareSettings.muplugins, softwareSettings.nodejs];
  }
  const preFormatted = chosenSettings.filter(softwareSetting => Boolean(softwareSetting)).map(softwareSetting => (0, _software.formatSoftwareSettings)(softwareSetting, include, opt.format));
  console.log((0, _format.formatData)(preFormatted, opt.format));
  await (0, _tracker.trackEvent)('config_software_get_success', trackingInfo);
});