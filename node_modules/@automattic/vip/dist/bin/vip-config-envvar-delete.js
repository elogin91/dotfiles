#!/usr/bin/env node
"use strict";

exports.__esModule = true;
exports.deleteEnvVarCommand = deleteEnvVarCommand;
var _chalk = _interopRequireDefault(require("chalk"));
var _command = _interopRequireDefault(require("../lib/cli/command"));
var _format = require("../lib/cli/format");
var _api = require("../lib/envvar/api");
var _input = require("../lib/envvar/input");
var _logging = require("../lib/envvar/logging");
var _tracker = require("../lib/tracker");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const baseUsage = 'vip config envvar delete';
const exampleUsage = 'vip @example-app.develop config envvar delete';

// Command examples
const examples = [{
  usage: `${exampleUsage} MY_VARIABLE`,
  description: 'Delete the environment variable "MY_VARIABLE" from the environment.'
}];

/**
 * @param {string[]} arg
 * @param {object} opt
 * @return {Promise<void>}
 */
async function deleteEnvVarCommand(arg, opt) {
  // Help the user by uppercasing input.
  const name = arg[0].trim().toUpperCase();
  const trackingParams = {
    app_id: opt.app.id,
    command: `${baseUsage} ${name}`,
    env_id: opt.env.id,
    org_id: opt.app.organization.id,
    skip_confirm: Boolean(opt.skipConfirmation),
    variable_name: name
  };
  const envName = opt.env.type;
  const appName = opt.app.name;
  if (!opt.skipConfirmation && envName === 'production') {
    const yes = await (0, _input.confirm)(`Are you sure you want to delete the environment variable ${name} on ${(0, _format.formatEnvironment)(envName)} for site ${appName}?`);
    if (!yes) {
      (0, _tracker.trackEvent)('wpcli_confirm_cancel', trackingParams).catch(() => {});
      console.log('Command cancelled');
      process.exit();
    }
  }
  (0, _logging.debug)(`Request: Delete environment variable ${JSON.stringify(name)} for ${(0, _logging.getEnvContext)(opt.app, opt.env)}`);
  await (0, _tracker.trackEvent)('envvar_delete_command_execute', trackingParams);
  if (!(0, _api.validateNameWithMessage)(name)) {
    await (0, _tracker.trackEvent)('envvar_delete_invalid_name', trackingParams);
    process.exit(1);
  }
  if (!opt.skipConfirmation) {
    await (0, _input.promptForValue)(`Type ${name} to confirm deletion:`, name).catch(async () => {
      await (0, _tracker.trackEvent)('envvar_delete_user_cancelled_input', trackingParams);
      (0, _input.cancel)();
    });
    if (!(await (0, _input.confirm)(`Are you sure? ${_chalk.default.bold.red('Deletion is permanent')}`))) {
      await (0, _tracker.trackEvent)('envvar_delete_user_cancelled_confirmation', trackingParams);
      (0, _input.cancel)();
    }
  }
  await (0, _api.deleteEnvVar)(opt.app.id, opt.env.id, name).catch(async err => {
    await (0, _tracker.trackEvent)('envvar_delete_mutation_error', {
      ...trackingParams,
      error: err.message
    });
    throw err;
  });
  await (0, _tracker.trackEvent)('envvar_delete_command_success', trackingParams);
  console.log(_chalk.default.green(`Successfully deleted environment variable ${JSON.stringify(name)}`));
  if (!opt.skipConfirmation) {
    console.log(_chalk.default.bgYellow(_chalk.default.bold('Important:')), 'Updates to environment variables will not be available until the applicationâ€™s next deploy.');
  }
}
(0, _command.default)({
  appContext: true,
  appQuery: _api.appQuery,
  envContext: true,
  requiredArgs: 1,
  usage: `${baseUsage} <VARIABLE_NAME>`
}).examples(examples).option('skip-confirmation', 'Skip manual confirmation of input (USE WITH CAUTION)', false).argv(process.argv, deleteEnvVarCommand);