#!/usr/bin/env node
"use strict";

var _devEnvSyncSql = require("../commands/dev-env-sync-sql");
var _command = _interopRequireDefault(require("../lib/cli/command"));
var _devEnvironmentCli = require("../lib/dev-environment/dev-environment-cli");
var _devEnvironmentCore = require("../lib/dev-environment/dev-environment-core");
var _devEnvironmentLando = require("../lib/dev-environment/dev-environment-lando");
var _tracker = require("../lib/tracker");
var _userError = _interopRequireDefault(require("../lib/user-error"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const usage = 'vip dev-env sync sql';
const examples = [{
  usage: `vip @example-app.develop dev-env sync sql --slug=example-site`,
  description: 'Sync the database of the develop environment in the "example-app" application to a local environment named "example-site".'
}];
const appQuery = `
	id,
	name,
	type,
	organization { id, name },
	environments{
		id
		appId
		type
		name
		primaryDomain { name }
		uniqueLabel
		isMultisite
		wpSitesSDS(first:500) {
			nodes {
				id
				blogId
				homeUrl
			}
		}
	}
`;
(0, _command.default)({
  appContext: true,
  appQuery,
  envContext: true,
  requiredArgs: 0,
  module: 'dev-env-sync-sql',
  usage
}).option('slug', 'A unique name for a local environment. Default is "vip-local".', undefined, _devEnvironmentCli.processSlug).option('force', 'Skip validations.', undefined, _devEnvironmentCli.processBooleanOption).examples(examples).argv(process.argv, async (arg, opt) => {
  const {
    app,
    env,
    ...optRest
  } = opt;
  const slug = await (0, _devEnvironmentCli.getEnvironmentName)(optRest);
  const trackerFn = (0, _tracker.makeCommandTracker)('dev_env_sync_sql', {
    app: app.id,
    env: env.uniqueLabel,
    slug,
    multisite: env.isMultisite
  });
  await trackerFn('execute');
  const lando = await (0, _devEnvironmentLando.bootstrapLando)();
  const envPath = (0, _devEnvironmentCore.getEnvironmentPath)(slug);
  if (!(await (0, _devEnvironmentLando.isEnvUp)(lando, envPath)) && !opt.force) {
    await trackerFn('env_not_running_error', {
      errorMessage: 'Environment was not running'
    });
    throw new _userError.default('Environment needs to be started first');
  }
  const cmd = new _devEnvSyncSql.DevEnvSyncSQLCommand(app, env, slug, lando, trackerFn);
  // TODO: There's a function called handleCLIException for dev-env that handles exceptions but DevEnvSyncSQLCommand has its own implementation.
  // We should probably use handleCLIException instead?
  const didCommandRun = await cmd.run();
  if (!didCommandRun) {
    console.log('Command canceled by user.');
  }
  await trackerFn('success');
});