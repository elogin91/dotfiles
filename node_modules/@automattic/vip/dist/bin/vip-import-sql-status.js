#!/usr/bin/env node
"use strict";

var _command = _interopRequireDefault(require("../lib/cli/command"));
var exit = _interopRequireWildcard(require("../lib/cli/exit"));
var _progress = require("../lib/cli/progress");
var _dbFileImport = require("../lib/site-import/db-file-import");
var _status = require("../lib/site-import/status");
var _tracker = require("../lib/tracker");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const appQuery = `
id,
name,
type,
typeId,
environments{
	id
	appId
	type
	name
	isK8sResident
	primaryDomain {
		id
		name
	}
}
`;
(0, _command.default)({
  appContext: true,
  appQuery,
  envContext: true,
  requiredArgs: 0
}).argv(process.argv, async (arg, {
  app,
  env
}) => {
  const {
    id: envId,
    appId
  } = env;
  const track = _tracker.trackEventWithEnv.bind(null, appId, envId);
  if (!(0, _dbFileImport.isSupportedApp)(app)) {
    await track('import_sql_command_error', {
      errorType: 'unsupported-app'
    });
    exit.withError('The type of application you specified does not currently support SQL imports.');
  }
  await track('import_sql_check_status_command_execute');
  const progressTracker = new _progress.ProgressTracker([]);
  progressTracker.prefix = `
=============================================================
Checking the SQL import status for your environment...
`;
  await (0, _status.importSqlCheckStatus)({
    app,
    env,
    progressTracker,
    shouldReturnMissingJobImmediately: true
  });
});