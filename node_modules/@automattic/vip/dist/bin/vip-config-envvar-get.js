#!/usr/bin/env node
"use strict";

exports.__esModule = true;
exports.getEnvVarCommand = getEnvVarCommand;
var _chalk = _interopRequireDefault(require("chalk"));
var _command = _interopRequireDefault(require("../lib/cli/command"));
var _api = require("../lib/envvar/api");
var _logging = require("../lib/envvar/logging");
var _tracker = require("../lib/tracker");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const baseUsage = 'vip config envvar get';
const exampleUsage = 'vip @example-app.develop config envvar get';

// Command examples
const examples = [{
  usage: `${exampleUsage} MY_VARIABLE`,
  description: 'Retrieve the value of the environment variable "MY_VARIABLE".'
}];

/**
 * @param {string[]} arg
 * @param {object} opt
 * @return {Promise<void>}
 */
async function getEnvVarCommand(arg, opt) {
  // Help the user by uppercasing input.
  const name = arg[0].trim().toUpperCase();
  const trackingParams = {
    app_id: opt.app.id,
    command: `${baseUsage} ${name}`,
    env_id: opt.env.id,
    org_id: opt.app.organization.id,
    variable_name: name
  };
  (0, _logging.debug)(`Request: Get environment variable ${JSON.stringify(name)} for ${(0, _logging.getEnvContext)(opt.app, opt.env)}`);
  await (0, _tracker.trackEvent)('envvar_get_command_execute', trackingParams);
  const envvar = await (0, _api.getEnvVar)(opt.app.id, opt.env.id, name).catch(async err => {
    await (0, _tracker.trackEvent)('envvar_get_query_error', {
      ...trackingParams,
      error: err.message
    });
    throw err;
  });
  await (0, _tracker.trackEvent)('envvar_get_command_success', trackingParams);
  if (!envvar) {
    const message = `The environment variable ${JSON.stringify(name)} does not exist`;
    console.log(_chalk.default.yellow(message));
    process.exit();
  }
  console.log(envvar.value);
}
(0, _command.default)({
  appContext: true,
  appQuery: _api.appQuery,
  envContext: true,
  requiredArgs: 1,
  usage: `${baseUsage} <VARIABLE_NAME>`
}).examples(examples).argv(process.argv, getEnvVarCommand);