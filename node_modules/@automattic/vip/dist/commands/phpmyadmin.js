"use strict";

exports.__esModule = true;
exports.PhpMyAdminCommand = exports.GET_PHP_MY_ADMIN_STATUS_QUERY = exports.GENERATE_PHP_MY_ADMIN_URL_MUTATION = exports.ENABLE_PHP_MY_ADMIN_MUTATION = void 0;
var _chalk = _interopRequireDefault(require("chalk"));
var _graphqlTag = _interopRequireDefault(require("graphql-tag"));
var _api = _interopRequireWildcard(require("../lib/api"));
var exit = _interopRequireWildcard(require("../lib/cli/exit"));
var _progress = require("../lib/cli/progress");
var _utils = require("../lib/utils");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * External dependencies
 */

/**
 * Internal dependencies
 */

const GENERATE_PHP_MY_ADMIN_URL_MUTATION = exports.GENERATE_PHP_MY_ADMIN_URL_MUTATION = (0, _graphqlTag.default)`
	mutation GeneratePhpMyAdminAccess($input: GeneratePhpMyAdminAccessInput) {
		generatePHPMyAdminAccess(input: $input) {
			expiresAt
			url
		}
	}
`;
const GET_PHP_MY_ADMIN_STATUS_QUERY = exports.GET_PHP_MY_ADMIN_STATUS_QUERY = (0, _graphqlTag.default)`
	query PhpMyAdminStatus($appId: Int!, $envId: Int!) {
		app(id: $appId) {
			environments(id: $envId) {
				phpMyAdminStatus {
					status
				}
			}
		}
	}
`;
const ENABLE_PHP_MY_ADMIN_MUTATION = exports.ENABLE_PHP_MY_ADMIN_MUTATION = (0, _graphqlTag.default)`
	mutation EnablePhpMyAdmin($input: EnablePhpMyAdminInput) {
		enablePHPMyAdmin(input: $input) {
			success
		}
	}
`;
async function generatePhpMyAdminAccess(envId) {
  // Disable global error handling so that we can handle errors ourselves
  (0, _api.disableGlobalGraphQLErrorHandling)();
  const api = (0, _api.default)();
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const resp = await api.mutate({
    mutation: GENERATE_PHP_MY_ADMIN_URL_MUTATION,
    variables: {
      input: {
        environmentId: envId
      }
    }
  });

  // Re-enable global error handling
  (0, _api.enableGlobalGraphQLErrorHandling)();

  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
  return resp?.data?.generatePHPMyAdminAccess?.url;
}
async function enablePhpMyAdmin(envId) {
  // Disable global error handling so that we can handle errors ourselves
  (0, _api.disableGlobalGraphQLErrorHandling)();
  const api = (0, _api.default)();
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const resp = await api.mutate({
    mutation: ENABLE_PHP_MY_ADMIN_MUTATION,
    variables: {
      input: {
        environmentId: envId
      }
    }
  });

  // Re-enable global error handling
  (0, _api.enableGlobalGraphQLErrorHandling)();

  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
  return resp?.data?.generatePHPMyAdminAccess?.url;
}
async function getPhpMyAdminStatus(appId, envId) {
  // Disable global error handling so that we can handle errors ourselves
  (0, _api.disableGlobalGraphQLErrorHandling)();
  const api = (0, _api.default)();

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const resp = await api.query({
    query: GET_PHP_MY_ADMIN_STATUS_QUERY,
    variables: {
      appId,
      envId
    },
    fetchPolicy: 'network-only'
  });

  // Re-enable global error handling
  (0, _api.enableGlobalGraphQLErrorHandling)();

  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
  return resp?.data?.app?.environments?.[0]?.phpMyAdminStatus?.status;
}
class PhpMyAdminCommand {
  app;
  env;
  silent;
  track;
  steps = {
    ENABLE: 'enable',
    GENERATE: 'generate'
  };
  progressTracker;
  constructor(app, env, trackerFn = async () => {}) {
    this.app = app;
    this.env = env;
    this.track = trackerFn;
    this.progressTracker = new _progress.ProgressTracker([{
      id: this.steps.ENABLE,
      name: 'Enabling PHPMyAdmin for this environment'
    }, {
      id: this.steps.GENERATE,
      name: 'Generating access link'
    }]);
  }
  log(msg) {
    if (this.silent) {
      return;
    }
    console.log(msg);
  }
  stopProgressTracker() {
    this.progressTracker.print();
    this.progressTracker.stopPrinting();
  }
  async openUrl(url) {
    const {
      default: open
    } = await import('open');
    void open(url, {
      wait: false
    });
  }
  async getStatus() {
    return await getPhpMyAdminStatus(this.app.id, this.env.id);
  }
  async maybeEnablePhpMyAdmin() {
    const status = await this.getStatus();
    if (!['running', 'enabled'].includes(status)) {
      await enablePhpMyAdmin(this.env.id);
      await (0, _utils.pollUntil)(this.getStatus.bind(this), 1000, sts => sts === 'running');

      // Additional 30s for LB routing to be updated
      await new Promise(resolve => setTimeout(resolve, 30000));
    }
  }
  async run(silent = false) {
    this.silent = silent;
    if (!this.app.id) {
      exit.withError('No app was specified');
    }
    if (!this.env.id) {
      exit.withError('No environment was specified');
    }
    const message = 'Note: PHPMyAdmin sessions are read-only. If you run a query that writes to DB, it will fail.';
    console.log(_chalk.default.yellow(message));
    this.progressTracker.startPrinting();
    try {
      this.progressTracker.stepRunning(this.steps.ENABLE);
      await this.maybeEnablePhpMyAdmin();
      this.progressTracker.stepSuccess(this.steps.ENABLE);
    } catch (err) {
      this.progressTracker.stepFailed(this.steps.ENABLE);
      const error = err;
      void this.track('error', {
        error_type: 'enable_pma',
        error_message: error.message,
        stack: error.stack
      });
      this.stopProgressTracker();
      if (error.graphQLErrors?.find(gqlError => gqlError.message === 'Unauthorized')) {
        exit.withError('You do not have sufficient permission to access phpMyAdmin for this environment.');
      }
      exit.withError('Failed to enable PhpMyAdmin. Please try again. If the problem persists, please contact support.');
    }
    let url;
    try {
      this.progressTracker.stepRunning(this.steps.GENERATE);
      url = await generatePhpMyAdminAccess(this.env.id);
      this.progressTracker.stepSuccess(this.steps.GENERATE);
    } catch (err) {
      this.progressTracker.stepFailed(this.steps.GENERATE);
      const error = err;
      void this.track('error', {
        error_type: 'generate_pma_url',
        error_message: error.message,
        stack: error.stack
      });
      this.stopProgressTracker();
      exit.withError(`Failed to generate PhpMyAdmin URL: ${error.message}`);
    }
    void this.openUrl(url);
    this.stopProgressTracker();
    this.log('PhpMyAdmin is opened in your default browser.');
  }
}
exports.PhpMyAdminCommand = PhpMyAdminCommand;