"use strict";

exports.__esModule = true;
exports.reIndexSearch = exports.flushCache = exports.dataCleanup = exports.addAdminUser = void 0;
var _devEnvironmentCore = require("./dev-environment-core");
const addAdminUser = async (lando, slug, quiet) => {
  const addUserArg = ['wp', 'dev-env-add-admin', '--username=vipgo', '--password=password', '--skip-plugins', '--skip-themes'].concat(quiet ? ['--quiet'] : []);
  await (0, _devEnvironmentCore.exec)(lando, slug, addUserArg);
};
exports.addAdminUser = addAdminUser;
const dataCleanup = async (lando, slug, quiet) => {
  const cleanupArg = ['wp', 'vip', 'data-cleanup', 'sql-import'].concat(quiet ? ['--quiet'] : []);
  try {
    await (0, _devEnvironmentCore.exec)(lando, slug, cleanupArg, {
      stdio: 'inherit'
    });
  } catch (error) {
    // This must not be a fatal error
    console.log('WARNING: data cleanup failed.');
  }
};
exports.dataCleanup = dataCleanup;
const reIndexSearch = async (lando, slug) => {
  await (0, _devEnvironmentCore.exec)(lando, slug, ['wp', 'cli', 'has-command', 'vip-search']);
  await (0, _devEnvironmentCore.exec)(lando, slug, ['wp', 'vip-search', 'index', '--setup', '--network-wide', '--skip-confirm']);
};
exports.reIndexSearch = reIndexSearch;
const flushCache = async (lando, slug, quiet) => {
  const cacheArg = ['wp', 'cache', 'flush', '--skip-plugins', '--skip-themes'].concat(quiet ? ['--quiet'] : []);
  await (0, _devEnvironmentCore.exec)(lando, slug, cacheArg);
};
exports.flushCache = flushCache;