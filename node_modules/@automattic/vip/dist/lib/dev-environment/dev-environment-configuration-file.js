"use strict";

exports.__esModule = true;
exports.CONFIGURATION_FILE_NAME = void 0;
exports.getConfigurationFileOptions = getConfigurationFileOptions;
exports.mergeConfigurationFileOptions = mergeConfigurationFileOptions;
var _chalk = _interopRequireDefault(require("chalk"));
var _debug = _interopRequireDefault(require("debug"));
var _jsYaml = _interopRequireWildcard(require("js-yaml"));
var _promises = require("node:fs/promises");
var _nodePath = _interopRequireDefault(require("node:path"));
var _devEnvironmentCli = require("./dev-environment-cli");
var exit = _interopRequireWildcard(require("../cli/exit"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const debug = (0, _debug.default)('@automattic/vip:bin:dev-environment');
const CONFIGURATION_FILE_NAME = exports.CONFIGURATION_FILE_NAME = 'vip-dev-env.yml';
async function getConfigurationFileOptions() {
  const configurationFile = await findConfigurationFile();
  if (configurationFile === false) {
    return {};
  }
  const {
    configurationPath,
    configurationContents
  } = configurationFile;
  let configurationFromFile = {};
  try {
    configurationFromFile = _jsYaml.default.load(configurationContents, {
      // Only allow strings, arrays, and objects to be parsed from configuration file
      // This causes number-looking values like `php: 8.1` to be parsed directly into strings
      schema: _jsYaml.FAILSAFE_SCHEMA
    });
  } catch (err) {
    const messageToShow = `Configuration file ${_chalk.default.grey(configurationPath)} could not be loaded:\n` + err.toString();
    exit.withError(messageToShow);
  }
  try {
    let configuration = sanitizeConfiguration(configurationFromFile, configurationPath);
    configuration = adjustRelativePaths(configuration, configurationPath);
    debug('Sanitized configuration from file:', configuration);
    return configuration;
  } catch (err) {
    exit.withError(err instanceof Error ? err : new Error('Unknown error'));
  }
}
function sanitizeConfiguration(configuration, configurationFilePath) {
  const genericConfigurationError = `Configuration file ${_chalk.default.grey(configurationFilePath)} is available but ` + `couldn't be loaded. Ensure there is a ${_chalk.default.cyan('configuration-version')} and ${_chalk.default.cyan('slug')} ` + `configured. For example:\n\n${_chalk.default.grey(getConfigurationFileExample())}`;
  if (Array.isArray(configuration) || typeof configuration !== 'object') {
    throw new Error(genericConfigurationError);
  }
  const version = configuration['configuration-version'];
  if (typeof version !== 'string' && typeof version !== 'number' || configuration.slug === undefined || configuration.slug === null) {
    throw new Error(genericConfigurationError);
  }
  const validVersions = getAllConfigurationFileVersions().map(ver => _chalk.default.cyan(ver)).join(', ');
  if (!isValidConfigurationFileVersion(version.toString())) {
    throw new Error(`Configuration file ${_chalk.default.grey(configurationFilePath)} has an invalid ` + `${_chalk.default.cyan('configuration-version')} key. Update to a supported version. For example:\n\n` + _chalk.default.grey(getConfigurationFileExample()) + `\nSupported configuration versions: ${validVersions}.\n`);
  }
  const stringToBooleanIfDefined = value => {
    if (typeof value !== 'string' || !['true', 'false'].includes(value)) {
      return undefined;
    }
    return value === 'true';
  };
  const configurationMeta = {
    'configuration-path': configurationFilePath
  };
  const sanitizedConfiguration = {
    version: version.toString(),
    // eslint-disable-next-line @typescript-eslint/no-base-to-string
    slug: configuration.slug.toString(),
    // NOSONAR
    title: configuration.title?.toString(),
    multisite: stringToBooleanIfDefined(configuration.multisite),
    php: configuration.php?.toString(),
    wordpress: configuration.wordpress?.toString(),
    'mu-plugins': configuration['mu-plugins']?.toString(),
    'app-code': configuration['app-code']?.toString(),
    elasticsearch: stringToBooleanIfDefined(configuration.elasticsearch),
    phpmyadmin: stringToBooleanIfDefined(configuration.phpmyadmin),
    xdebug: stringToBooleanIfDefined(configuration.xdebug),
    mailpit: stringToBooleanIfDefined(configuration.mailpit),
    'media-redirect-domain': configuration['media-redirect-domain']?.toString(),
    photon: stringToBooleanIfDefined(configuration.photon),
    cron: stringToBooleanIfDefined(configuration.cron),
    meta: configurationMeta
  };

  // Remove undefined values
  Object.keys(sanitizedConfiguration).forEach(
  // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
  key => sanitizedConfiguration[key] === undefined && delete sanitizedConfiguration[key]);
  return sanitizedConfiguration;
}
function adjustRelativePaths(configuration, configurationFilePath) {
  const configurationDirectory = _nodePath.default.resolve(_nodePath.default.dirname(configurationFilePath));
  if (configuration['app-code'] && configuration['app-code'] !== 'image') {
    configuration['app-code'] = _nodePath.default.join(configurationDirectory, configuration['app-code']);
  }
  if (configuration['mu-plugins'] && configuration['mu-plugins'] !== 'image') {
    configuration['mu-plugins'] = _nodePath.default.join(configurationDirectory, configuration['mu-plugins']);
  }
  return configuration;
}
function mergeConfigurationFileOptions(preselectedOptions, configurationFileOptions) {
  // configurationFileOptions holds different parameters than present in
  // preselectedOptions like "slug", and friendly-named parameters (e.g.
  // 'app-code' vs 'appCode'). Selectively merge configurationFileOptions
  // parameters into preselectedOptions.
  const configurationFileInstanceOptions = {
    title: configurationFileOptions.title,
    multisite: configurationFileOptions.multisite,
    php: configurationFileOptions.php,
    wordpress: configurationFileOptions.wordpress,
    muPlugins: configurationFileOptions['mu-plugins'],
    appCode: configurationFileOptions['app-code'],
    elasticsearch: configurationFileOptions.elasticsearch,
    phpmyadmin: configurationFileOptions.phpmyadmin,
    xdebug: configurationFileOptions.xdebug,
    xdebugConfig: configurationFileOptions['xdebug-config'],
    mailpit: configurationFileOptions.mailpit,
    mediaRedirectDomain: configurationFileOptions['media-redirect-domain'],
    photon: configurationFileOptions.photon,
    cron: configurationFileOptions.cron
  };
  const mergedOptions = {};
  Object.keys(configurationFileInstanceOptions).forEach(key => {
    // preselectedOptions (supplied from command-line) override configurationFileOptions
    if (preselectedOptions[key] !== undefined) {
      mergedOptions[key] = preselectedOptions[key];
    } else if (configurationFileInstanceOptions[key] !== undefined) {
      mergedOptions[key] = configurationFileInstanceOptions[key];
    }
  });
  return mergedOptions;
}
async function findConfigurationFile() {
  let currentPath = process.cwd();
  const rootPath = _nodePath.default.parse(currentPath).root;
  let depth = 0;
  const maxDepth = 64;
  const pathPromises = [];
  while (currentPath !== rootPath && depth < maxDepth) {
    const configurationPath = _nodePath.default.join(currentPath, _devEnvironmentCli.CONFIGURATION_FOLDER, CONFIGURATION_FILE_NAME);
    pathPromises.push((0, _promises.readFile)(configurationPath, 'utf8').then(configurationContents => ({
      configurationPath,
      configurationContents
    })));

    // Move up one directory
    currentPath = _nodePath.default.dirname(currentPath);

    // Use depth as a sanity check to avoid an infitite loop
    depth++;
  }
  return Promise.any(pathPromises).catch(() => false);
}
const CONFIGURATION_FILE_VERSIONS = ['1'];
function getAllConfigurationFileVersions() {
  return CONFIGURATION_FILE_VERSIONS;
}
function getLatestConfigurationFileVersion() {
  return CONFIGURATION_FILE_VERSIONS[CONFIGURATION_FILE_VERSIONS.length - 1];
}
function isValidConfigurationFileVersion(version) {
  return CONFIGURATION_FILE_VERSIONS.includes(version);
}
function getConfigurationFileExample() {
  return `configuration-version: ${getLatestConfigurationFileVersion()}
slug: dev-site
title: Dev Site
php: 8.2
wordpress: 6.2
app-code: ../
mu-plugins: image
multisite: false
phpmyadmin: false
elasticsearch: false
xdebug: false
mailpit: false
photon: false
cron: false
`;
}