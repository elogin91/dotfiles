"use strict";

exports.__esModule = true;
exports.getDockerSocket = getDockerSocket;
exports.getEngineConfig = getEngineConfig;
exports.splitca = splitca;
var _nodeFs = require("node:fs");
var _promises = require("node:fs/promises");
var _nodeOs = require("node:os");
var _nodePath = require("node:path");
/* eslint-disable no-await-in-loop */

/**
 * Reads a Certificate Authority file and returns it as an array of certificates
 *
 * @param {string} filepath Path to the file
 * @return {string[]} Array of certificates
 */
async function splitca(filepath) {
  const ca = [];
  const data = await (0, _promises.readFile)(filepath, 'utf-8');
  if (!data.includes('-END CERTIFICATE-') || !data.includes('-BEGIN CERTIFICATE-')) {
    throw new Error("File does not contain 'BEGIN CERTIFICATE' or 'END CERTIFICATE'");
  }
  const chain = data.split('\n');
  let cert = [];
  for (const line of chain) {
    if (line) {
      cert.push(line);
      if (/-END CERTIFICATE-/.exec(line)) {
        ca.push(cert.join('\n'));
        cert = [];
      }
    }
  }
  return ca;
}
async function canReadWrite(what) {
  try {
    // eslint-disable-next-line no-bitwise
    await (0, _promises.access)(what, _nodeFs.constants.R_OK | _nodeFs.constants.W_OK);
    return true;
  } catch (err) {
    return false;
  }
}
async function getDockerSocket() {
  if ((0, _nodeOs.platform)() !== 'win32') {
    const possibleSocket = process.env.DOCKER_HOST ?? '';
    // If `DOCKER_HOST` is set and not empty, and if it does not point to a unix socket, return - not much that we can do here.
    if (possibleSocket && !possibleSocket.startsWith('unix://')) {
      return possibleSocket;
    }
    const paths = [];
    if (possibleSocket) {
      // This is a UNIX socket, strip the leading `unix://` prefix and make sure the path starts with a slash.
      // (there are cases when the path is prefixed with two or three slashes)
      paths.push(possibleSocket.replace(/^unix:\/+/, '/'));
    }

    // Try the default location
    paths.push('/var/run/docker.sock');
    // Try alternative locations
    paths.push((0, _nodePath.join)((0, _nodeOs.homedir)(), '.docker', 'run', 'docker.sock'));
    paths.push((0, _nodePath.join)((0, _nodeOs.homedir)(), '.orbstack', 'run', 'docker.sock'));
    for (const socketPath of paths) {
      try {
        const stats = await (0, _promises.stat)(socketPath);
        if (stats.isSocket() && (await canReadWrite(socketPath))) {
          process.env.DOCKER_HOST = `unix://${socketPath}`;
          return socketPath;
        }
      } catch (err) {
        // Do nothing
      }
    }
  }
  return null;
}
async function getEngineConfig(dockerHost) {
  const opts = {};
  if (dockerHost.startsWith('tcp://')) {
    const split = /^(?:tcp:\/\/)([^:]+):(\d+)/g.exec(dockerHost);
    if (split && split.length === 3) {
      opts.host = split[1];
      opts.port = split[2];
    } else {
      throw new Error('Invalid DOCKER_HOST format');
    }
  } else {
    opts.socketPath = dockerHost;
  }
  if (process.env.DOCKER_TLS_VERIFY === '1' || opts.port === '2376') {
    opts.protocol = 'https';
  } else {
    opts.protocol = 'http';
  }
  const certPath = process.env.DOCKER_CERT_PATH;
  if (certPath) {
    const [ca, cert, key] = await Promise.all([splitca((0, _nodePath.join)(certPath, 'ca.pem')), (0, _promises.readFile)((0, _nodePath.join)(certPath, 'cert.pem'), 'utf-8'), (0, _promises.readFile)((0, _nodePath.join)(certPath, 'key.pem'), 'utf-8')]);
    opts.ca = ca;
    opts.cert = cert;
    opts.key = key;
  }
  if (process.env.DOCKER_CLIENT_TIMEOUT) {
    opts.timeout = parseInt(process.env.DOCKER_CLIENT_TIMEOUT, 10);
  }
  return opts;
}