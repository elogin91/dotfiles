"use strict";

exports.__esModule = true;
exports.checkFeatureEnabled = checkFeatureEnabled;
exports.checkIfUserIsVip = checkIfUserIsVip;
exports.exitWhenFeatureDisabled = exitWhenFeatureDisabled;
var exit = _interopRequireWildcard(require("./exit"));
var featureFlags = _interopRequireWildcard(require("../../lib/api/feature-flags"));
var _token = _interopRequireDefault(require("../../lib/token"));
var _tracker = require("../../lib/tracker");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
async function checkFeatureEnabled(featureName, exitOnFalse = false) {
  // TODO: eventually let's look at more feature flags coming from the public api,
  // for now, let's see if the user of the CLI is VIP
  await (0, _tracker.trackEvent)('checkFeatureEnabled_start', {
    featureName,
    exitOnFalse
  });
  let isVIP;
  try {
    const res = await featureFlags.get();
    if (res?.data.me?.isVIP !== undefined) {
      isVIP = res.data.me.isVIP;
    } else {
      isVIP = false;
    }
  } catch (err) {
    const message = err.toString();
    await (0, _tracker.trackEvent)('checkFeatureEnabled_fetch_error', {
      featureName,
      exitOnFalse,
      error: message
    });
    exit.withError(`Failed to determine if feature is enabled: ${message}`);
  }
  if (exitOnFalse && isVIP === false) {
    exit.withError('The feature you are attempting to use is not currently enabled.');
  }
  return isVIP === true;
}

// Because this function is called by trackEvent:
// - It cannot directly or indirectly call trackEvent, or it will cause a loop.
// - It is mocked globally in jest.setupMocks.js.
async function checkIfUserIsVip() {
  const token = await _token.default.get();
  if (token.valid()) {
    const res = await featureFlags.get();
    return Boolean(res?.data.me?.isVIP);
  }
  return false;
}
async function exitWhenFeatureDisabled(featureName) {
  return checkFeatureEnabled(featureName, true);
}