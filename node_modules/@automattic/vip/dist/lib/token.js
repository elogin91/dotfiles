"use strict";

exports.__esModule = true;
exports.default = exports.SERVICE = void 0;
var _jwtDecode = require("jwt-decode");
var _uuid2 = require("uuid");
var _api = require("./api");
var _keychain = _interopRequireDefault(require("./keychain"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// Config
const SERVICE = exports.SERVICE = 'vip-go-cli';
class Token {
  _raw;
  _id;
  iat;
  exp;
  constructor(token) {
    if (!token) {
      return;
    }
    token = token.trim();
    if (!token.length) {
      return;
    }
    const decodedToken = (0, _jwtDecode.jwtDecode)(token);
    this._raw = token;
    if (decodedToken.id) {
      this._id = decodedToken.id;
    }
    if (decodedToken.iat) {
      this.iat = new Date(decodedToken.iat * 1000);
    }
    if (decodedToken.exp) {
      this.exp = new Date(decodedToken.exp * 1000);
    }
  }
  valid() {
    if (!this._id) {
      return false;
    }
    if (!this.iat) {
      return false;
    }
    const now = new Date();
    if (!this.exp) {
      return now > this.iat;
    }
    return now > this.iat && now < this.exp;
  }
  expired() {
    if (!this.exp) {
      return false;
    }
    const now = new Date();
    return now > this.exp;
  }
  get id() {
    return this._id ?? NaN;
  }
  get raw() {
    return this._raw ?? '';
  }
  static async uuid() {
    const service = Token.getServiceName('-uuid');
    let _uuid = await _keychain.default.getPassword(service);
    if (!_uuid) {
      _uuid = (0, _uuid2.v4)();
      await _keychain.default.setPassword(service, _uuid);
    }
    return _uuid;
  }
  static async setUuid(_uuid) {
    const service = Token.getServiceName('-uuid');
    await _keychain.default.setPassword(service, _uuid);
  }
  static set(token) {
    const service = Token.getServiceName();
    return _keychain.default.setPassword(service, token);
  }
  static async get() {
    const service = Token.getServiceName();
    const token = (await _keychain.default.getPassword(service)) ?? '';
    return new Token(token);
  }
  static purge() {
    const service = Token.getServiceName();
    return _keychain.default.deletePassword(service);
  }
  static getServiceName(modifier = '') {
    let service = SERVICE;
    if (_api.PRODUCTION_API_HOST !== _api.API_HOST) {
      const sanitized = _api.API_HOST.replace(/[^a-z0-9]/gi, '-');
      service = `${SERVICE}:${sanitized}`;
    }
    return `${service}${modifier}`;
  }
}
exports.default = Token;