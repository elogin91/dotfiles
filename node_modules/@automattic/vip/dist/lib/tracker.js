"use strict";

exports.__esModule = true;
exports.aliasUser = aliasUser;
exports.makeCommandTracker = makeCommandTracker;
exports.trackEvent = trackEvent;
exports.trackEventWithEnv = trackEventWithEnv;
var _debug = _interopRequireDefault(require("debug"));
var _pendo = _interopRequireDefault(require("./analytics/clients/pendo"));
var _tracks = _interopRequireDefault(require("./analytics/clients/tracks"));
var _index = _interopRequireDefault(require("./analytics/index"));
var _env = _interopRequireDefault(require("./env"));
var _config = _interopRequireDefault(require("../lib/cli/config"));
var _token = _interopRequireDefault(require("../lib/token"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const debug = (0, _debug.default)('@automattic/vip:analytics');
let analytics = null;
async function init() {
  const uuid = await _token.default.uuid();
  const clients = [];
  const tracksUserType = _config.default.tracksUserType;
  const tracksEventPrefix = _config.default.tracksEventPrefix;
  if (tracksUserType && tracksEventPrefix) {
    clients.push(new _tracks.default(uuid, tracksUserType, tracksEventPrefix, _env.default));
    clients.push(new _pendo.default({
      env: _env.default,
      eventPrefix: tracksEventPrefix,
      userId: uuid
    }));
  }
  return new _index.default(clients);
}
async function getInstance() {
  if (analytics) {
    return analytics;
  }
  analytics = await init();
  return analytics;
}
async function trackEvent(name, props = {}) {
  try {
    await _token.default.uuid();
    const client = await getInstance();
    return await client.trackEvent(name, props);
  } catch (err) {
    debug('trackEvent() failed', err);
    return [];
  }
}
async function aliasUser(vipUserId) {
  if (vipUserId) {
    try {
      await trackEvent('_alias_user', {
        ui: vipUserId,
        _ut: _config.default.tracksUserType,
        anonid: await _token.default.uuid()
      });
      await _token.default.setUuid(`${vipUserId}`);
    } catch (err) {
      debug('aliasUser() failed', err);
    }
  }
}
function trackEventWithEnv(appId, envId, eventName, eventProps = {}) {
  return trackEvent(eventName, {
    ...eventProps,
    app_id: appId,
    env_id: envId
  });
}
function makeCommandTracker(command, trackingInfo = {}) {
  const trackerFn = async (type, data = {}) => {
    await trackEvent(`${command}_command_${type}`, {
      ...trackingInfo,
      ...data
    });
  };
  return trackerFn;
}