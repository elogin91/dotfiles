"use strict";

exports.__esModule = true;
exports.LIMIT_MAX = void 0;
exports.getRecentSlowlogs = getRecentSlowlogs;
var _graphqlTag = _interopRequireDefault(require("graphql-tag"));
var _api = _interopRequireDefault(require("../../lib/api"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const LIMIT_MAX = exports.LIMIT_MAX = 5000;
const QUERY_ENVIRONMENT_SLOWLOGS = (0, _graphqlTag.default)`
	query GetAppLogs($appId: Int, $envId: Int, $limit: Int, $after: String) {
		app(id: $appId) {
			environments(id: $envId) {
				id
				slowlogs(limit: $limit, after: $after) {
					nodes {
						timestamp
						rowsSent
						rowsExamined
						queryTime
						requestUri
						query
					}
					nextCursor
					pollingDelaySeconds
				}
			}
		}
	}
`;
async function getRecentSlowlogs(appId, envId, limit, after) {
  const api = (0, _api.default)({
    exitOnError: false
  });
  const response = await api.query({
    query: QUERY_ENVIRONMENT_SLOWLOGS,
    variables: {
      appId,
      envId,
      limit,
      after
    }
  });
  const slowlogs = response.data.app?.environments?.[0]?.slowlogs;
  if (!slowlogs?.nodes) {
    throw new Error('Unable to query slowlogs');
  }
  return slowlogs;
}