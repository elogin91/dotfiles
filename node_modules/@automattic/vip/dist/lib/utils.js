"use strict";

exports.__esModule = true;
exports.getAbsolutePath = getAbsolutePath;
exports.makeTempDir = makeTempDir;
exports.pollUntil = pollUntil;
var _debug = _interopRequireDefault(require("debug"));
var _fs = _interopRequireDefault(require("fs"));
var _promises = require("node:timers/promises");
var _os = _interopRequireDefault(require("os"));
var _path = _interopRequireDefault(require("path"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const debug = (0, _debug.default)('@automattic/vip:lib:utils');

/**
 * Polls a function until its return value satisfies a condition
 *
 * @param {Function} fn       A function to poll
 * @param {number}   interval Poll interval in milliseconds
 * @param {Function} isDone   A function that accepts the return of `fn`. Stops the polling if it returns true
 * @return {Promise}          A promise which resolves when the polling is done
 * @throws {Error}            If the fn throws an error
 */
async function pollUntil(fn, interval, isDone) {
  let done = false;
  while (!done) {
    // eslint-disable-next-line no-await-in-loop
    const result = await fn();
    done = isDone(result);
    if (!done) {
      // eslint-disable-next-line no-await-in-loop
      await (0, _promises.setTimeout)(interval);
    }
  }
}

/**
 * Create a temporary directory in the system's temp directory
 *
 * @param {string} prefix Prefix for the directory name
 * @return {string}       Path to the temporary directory
 * @throws {Error}        If the directory cannot be created
 */
function makeTempDir(prefix = 'vip-cli') {
  const tempDir = _fs.default.mkdtempSync(_path.default.join(_os.default.tmpdir(), `${prefix}-`));
  debug(`Created a directory to hold temporary files: ${tempDir}`);
  process.on('exit', () => {
    try {
      _fs.default.rmSync(tempDir, {
        recursive: true,
        force: true,
        maxRetries: 10
      });
      debug(`Removed temporary directory: ${tempDir}`);
    } catch (err) {
      console.warn(`Failed to remove temporary directory ${tempDir} (${err.message})`);
    }
  });
  return tempDir;
}

/**
 * Get absolute path to a file
 *
 * @param {string} filePath Path to the file
 *
 * @return {string} Absolute path to the file
 */
function getAbsolutePath(filePath) {
  if (filePath.startsWith('~')) {
    return filePath.replace('~', _os.default.homedir());
  }
  if (!_path.default.isAbsolute(filePath)) {
    return _path.default.resolve(process.cwd(), filePath);
  }
  return filePath;
}