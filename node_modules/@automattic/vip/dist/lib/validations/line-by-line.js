"use strict";

exports.__esModule = true;
exports.fileLineValidations = fileLineValidations;
exports.getReadInterface = getReadInterface;
var _debug = _interopRequireDefault(require("debug"));
var _nodeFs = require("node:fs");
var _promises = require("node:fs/promises");
var _nodeReadline = require("node:readline");
var exit = _interopRequireWildcard(require("../../lib/cli/exit"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const debug = (0, _debug.default)('vip:validations:line-by-line');
async function getReadInterface(filename) {
  let fd;
  try {
    fd = await (0, _promises.open)(filename);
  } catch (err) {
    exit.withError('The file at the provided path is either missing or not readable. Please check the input and try again.');
  }
  return (0, _nodeReadline.createInterface)({
    input: (0, _nodeFs.createReadStream)('', {
      fd
    }),
    output: undefined
  });
}
async function fileLineValidations(appId, envId, fileName, validations, searchReplace) {
  const isImport = true;
  const readInterface = await getReadInterface(fileName);
  debug('Validations: ', validations);
  readInterface.on('line', line => {
    validations.forEach(validation => {
      validation.execute(line);
    });
  });
  readInterface.on('error', err => {
    throw new Error(`Error validating input file: ${err.toString()}`, {
      cause: err
    });
  });

  // Block until the processing completes
  await new Promise(resolve => readInterface.on('close', resolve));
  readInterface.close();
  return Promise.all(validations.map(validation => {
    if (Object.prototype.hasOwnProperty.call(validation, 'postLineExecutionProcessing') && typeof validation.postLineExecutionProcessing === 'function') {
      return validation.postLineExecutionProcessing({
        fileName,
        isImport,
        appId,
        envId,
        searchReplace
      });
    }
    return Promise.resolve();
  }));
}