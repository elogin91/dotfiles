"use strict";

exports.__esModule = true;
exports.siteTypeValidations = void 0;
var _debug = _interopRequireDefault(require("debug"));
var _tracker = require("../../lib/tracker");
var _isMultiSite = require("../../lib/validations/is-multi-site");
var _isMultiSiteSqlDump = require("../../lib/validations/is-multi-site-sql-dump");
var _isMultisiteDomainMapped = require("../../lib/validations/is-multisite-domain-mapped");
var _utils = require("../../lib/validations/utils");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const debug = (0, _debug.default)('vip:vip-import-sql');
let isMultiSiteSqlDump = false;
let wpSiteInsertStatement;
const getWpSiteInsertStatement = (0, _utils.getMultilineStatement)(/INSERT INTO `wp_site`/s);
const siteTypeValidations = exports.siteTypeValidations = {
  execute: line => {
    const lineIsMultiSite = (0, _isMultiSiteSqlDump.sqlDumpLineIsMultiSite)(line);
    wpSiteInsertStatement = getWpSiteInsertStatement(line);
    if (lineIsMultiSite) {
      isMultiSiteSqlDump = true;
    }
  },
  postLineExecutionProcessing: async ({
    appId,
    envId,
    searchReplace
  }) => {
    const isMultiSite = await (0, _isMultiSite.isMultiSiteInSiteMeta)(appId ?? 0, envId ?? 0);
    const track = _tracker.trackEventWithEnv.bind(null, appId, envId);
    debug(`\nAppId: ${appId} is ${isMultiSite ? 'a multisite.' : 'not a multisite'}`);
    debug(`The SQL dump provided is ${isMultiSiteSqlDump ? 'from a multisite.' : 'not from a multisite'}\n`);
    if (!isMultiSite && isMultiSiteSqlDump) {
      await track('import_sql_command_error', {
        error_type: 'not-multisite-with-multisite-sql-dump'
      });
      throw new Error('You have provided a multisite SQL dump file for import into a single site (non-multisite).');
    }
    if (isMultiSite && !isMultiSiteSqlDump) {
      await track('import_sql_command_error', {
        error_type: 'subsite-import-without-subsite-sql-dump'
      });
      throw new Error('You have requested a subsite SQL import but have not provided a subsite compatiable SQL dump.');
    }

    // Get Primary Domain
    const primaryDomainFromSQL = (0, _isMultisiteDomainMapped.getPrimaryDomain)(wpSiteInsertStatement, searchReplace);

    // Check if Primary Domain exists (empty string does not qualify)
    const primaryDomainExists = primaryDomainFromSQL || '' !== primaryDomainFromSQL;

    // Check if primary domain is mapped only if it exists
    // Also saves on a call to Parker by checking ahead
    if (primaryDomainExists) {
      const isPrimaryDomainMapped = await (0, _isMultisiteDomainMapped.isMultisitePrimaryDomainMapped)(appId ?? 0, envId ?? 0, primaryDomainFromSQL);

      // If site is multisite AND the primary domain is exists AND the primary is unmapped
      // then throw an error
      if (isMultiSite && !isPrimaryDomainMapped) {
        await track('import_sql_command_error', {
          error_type: 'multisite-import-where-primary-domain-unmapped'
        });
        throw new Error("This import would set the network's main site domain to " + primaryDomainFromSQL + ', however this domain is not mapped to the target environment. Please replace this domain in your ' + 'import file, or map it to the environment.');
      }
    }
  }
};