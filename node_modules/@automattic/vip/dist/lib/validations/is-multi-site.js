"use strict";

exports.__esModule = true;
exports.isMultiSiteInSiteMeta = isMultiSiteInSiteMeta;
var _graphqlTag = _interopRequireDefault(require("graphql-tag"));
var _api = _interopRequireDefault(require("../../lib/api"));
var exit = _interopRequireWildcard(require("../../lib/cli/exit"));
var _tracker = require("../../lib/tracker");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const isMultiSite = new WeakMap();
async function isMultiSiteInSiteMeta(appId, envId) {
  const args = {
    0: appId,
    1: envId
  };

  // if we've already been through this, avoid doing it again within the same process
  const ret = isMultiSite.get(args);
  if ('boolean' === typeof ret) {
    return ret;
  }
  const api = (0, _api.default)();
  let res;
  try {
    res = await api.query({
      query: (0, _graphqlTag.default)`
				query AppMultiSiteCheck($appId: Int, $envId: Int) {
					app(id: $appId) {
						id
						name
						repo
						environments(id: $envId) {
							id
							appId
							name
							type
							isMultisite
							isSubdirectoryMultisite
						}
					}
				}
			`,
      variables: {
        appId,
        envId
      }
    });
  } catch (GraphQlError) {
    const track = _tracker.trackEventWithEnv.bind(null, appId, envId);
    await track('import_sql_command_error', {
      error_type: 'GraphQL-MultiSite-Check-failed',
      gql_err: GraphQlError
    });
    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
    exit.withError(`StartImport call failed: ${GraphQlError}`);
  }
  if (Array.isArray(res.data.app?.environments)) {
    const environments = res.data.app.environments;
    if (!environments?.length) {
      isMultiSite.set(args, false);
      return false;
    }
    // we asked for one result with one appId and one envId, so...
    const thisEnv = environments[0];
    if (thisEnv.isMultisite || thisEnv.isSubdirectoryMultisite) {
      isMultiSite.set(args, true);
      return true;
    }
  }
  return false;
}