"use strict";

exports.__esModule = true;
exports.getPrimaryDomainFromSQL = exports.getPrimaryDomain = void 0;
exports.isMultisitePrimaryDomainMapped = isMultisitePrimaryDomainMapped;
exports.maybeSearchReplacePrimaryDomain = void 0;
var _graphqlTag = _interopRequireDefault(require("graphql-tag"));
var _api = _interopRequireDefault(require("../../lib/api"));
var exit = _interopRequireWildcard(require("../../lib/cli/exit"));
var _tracker = require("../../lib/tracker");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * Extracts the domain for site with ID 1 from an INSERT INTO `wp_site` SQL statement
 *
 * @param {Array} statements An array of SQL statements
 * @return {string} The domain
 */
const getPrimaryDomainFromSQL = statements => {
  if (!statements.length) {
    return '';
  }
  const SQL_WP_SITE_DOMAINS_REGEX = /\(1,'(.*?)'/s;
  const matches = statements[0]?.join('').replace(/\s/g, '').match(SQL_WP_SITE_DOMAINS_REGEX);
  return matches ? matches[1] : '';
};

/**
 * Apply search-replacements to a domain
 *
 * @param {string}           domain        The domain to apply replacements to
 * @param {(string | Array)} searchReplace The search-replace pairs
 * @return {string} The processed domain
 */
exports.getPrimaryDomainFromSQL = getPrimaryDomainFromSQL;
const maybeSearchReplacePrimaryDomain = function (domain, searchReplace) {
  if (searchReplace) {
    const pairs = Array.isArray(searchReplace) ? searchReplace : [searchReplace];
    const domainReplacements = pairs.map(pair => pair.split(','));
    const primaryDomainReplacement = domainReplacements.find(pair => pair[0] === domain);
    return primaryDomainReplacement?.[1] ?? domain;
  }
  return domain;
};

/**
 * Get the primary domain as it will be imported
 *
 * @param {Array}            statements    An array of SQL statements
 * @param {(string | Array)} searchReplace The search-replace pairs
 * @return {string} The replaced domain, or the domain as found in the SQL dump
 */
exports.maybeSearchReplacePrimaryDomain = maybeSearchReplacePrimaryDomain;
const getPrimaryDomain = function (statements, searchReplace) {
  const domainFromSQL = getPrimaryDomainFromSQL(statements);
  return maybeSearchReplacePrimaryDomain(domainFromSQL, searchReplace);
};

/**
 * Gets the mapped domains and checks if the primary domain from the provided SQL dump is one of them
 *
 * @param {number} appId         The ID of the app in GOOP
 * @param {number} envId         The ID of the enviroment in GOOP
 * @param {string} primaryDomain The primary domain found in the provided SQL file
 * @return {boolean} Whether the primary domain is mapped
 */
exports.getPrimaryDomain = getPrimaryDomain;
async function isMultisitePrimaryDomainMapped(appId, envId, primaryDomain) {
  const track = _tracker.trackEventWithEnv.bind(null, appId, envId);
  const api = (0, _api.default)();
  let res;
  try {
    res = await api.query({
      query: (0, _graphqlTag.default)`
				query AppMappedDomains($appId: Int, $envId: Int) {
					app(id: $appId) {
						id
						name
						environments(id: $envId) {
							uniqueLabel
							isMultisite
							domains {
								nodes {
									name
									isPrimary
								}
							}
						}
					}
				}
			`,
      variables: {
        appId,
        envId
      }
    });
  } catch (GraphQlError) {
    await track('import_sql_command_error', {
      error_type: 'GraphQL-MappedDomain-Check-failed',
      gql_err: GraphQlError
    });
    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
    exit.withError(`StartImport call failed: ${GraphQlError}`);
  }
  if (!Array.isArray(res.data.app?.environments)) {
    return false;
  }
  const environments = res.data.app.environments;
  if (!environments?.length) {
    return false;
  }
  const mappedDomains = environments[0]?.domains?.nodes?.map(domain => domain?.name) ?? [];
  return mappedDomains.includes(primaryDomain);
}