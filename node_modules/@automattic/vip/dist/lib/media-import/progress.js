"use strict";

exports.__esModule = true;
exports.MediaImportProgressTracker = void 0;
var _singleLineLog = require("single-line-log");
var _format = require("../../lib/cli/format");
var _status = require("../../lib/media-import/status");
const PRINT_INTERVAL = process.env.DEBUG ? 5000 : 200; // How often the report is printed. Mainly affects the "spinner" animation.

class MediaImportProgressTracker {
  hasFailure;
  hasPrinted;
  printInterval;
  status;

  // Spinnerz go brrrr
  runningSprite;

  // This gets printed before the step status
  prefix;

  // This gets printed after the step status
  suffix;
  constructor(status) {
    this.runningSprite = new _format.RunningSprite();
    this.hasFailure = false;
    this.status = {
      ...status
    };
    this.prefix = '';
    this.suffix = '';
    this.hasPrinted = false;
  }
  setStatus(status) {
    if ('FAILED' === status.status) {
      this.hasFailure = true;
    }
    this.status = {
      ...status
    };
  }
  startPrinting(prePrintCallback = () => {}) {
    this.printInterval = setInterval(() => {
      prePrintCallback();
      this.print();
    }, PRINT_INTERVAL);
  }
  stopPrinting() {
    if (this.printInterval) {
      clearInterval(this.printInterval);
    }
  }
  print({
    clearAfter = false
  } = {}) {
    if (!this.hasPrinted) {
      this.hasPrinted = true;
      _singleLineLog.stdout.clear();
    }
    const statusIcon = (0, _status.getGlyphForStatus)(this.status.status ?? '', this.runningSprite);
    let logs;
    if (this.status.filesProcessed && this.status.filesTotal) {
      const progressPercentage = Math.floor(this.status.filesProcessed / this.status.filesTotal * 100);
      logs = `Imported Files: ${this.status.filesProcessed}/${this.status.filesTotal} - ${progressPercentage}% ${statusIcon}`;
    }

    // Output the logs
    (0, _singleLineLog.stdout)(`${this.prefix || ''}${logs ?? ''}${this.suffix || ''}`);
    if (clearAfter) {
      // Break out of the "Single log line" buffer
      _singleLineLog.stdout.clear();
    }
  }
}
exports.MediaImportProgressTracker = MediaImportProgressTracker;