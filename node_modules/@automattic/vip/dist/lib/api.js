"use strict";

exports.__esModule = true;
exports.PRODUCTION_API_HOST = exports.API_URL = exports.API_HOST = void 0;
exports.default = API;
exports.disableGlobalGraphQLErrorHandling = disableGlobalGraphQLErrorHandling;
exports.enableGlobalGraphQLErrorHandling = enableGlobalGraphQLErrorHandling;
var _core = require("@apollo/client/core");
var _context = require("@apollo/client/link/context");
var _core2 = require("@apollo/client/link/core");
var _error = require("@apollo/client/link/error");
var _chalk = _interopRequireDefault(require("chalk"));
var _http = _interopRequireDefault(require("./api/http"));
var _env = _interopRequireDefault(require("./env"));
var _token = _interopRequireDefault(require("./token"));
var _proxyAgent = require("../lib/http/proxy-agent");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// Config
const PRODUCTION_API_HOST = exports.PRODUCTION_API_HOST = 'https://api.wpvip.com';
// eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
const API_HOST = exports.API_HOST = process.env.API_HOST || PRODUCTION_API_HOST; // NOSONAR
const API_URL = exports.API_URL = `${API_HOST}/graphql`;
let globalGraphQLErrorHandlingEnabled = true;
function disableGlobalGraphQLErrorHandling() {
  globalGraphQLErrorHandlingEnabled = false;
}
function enableGlobalGraphQLErrorHandling() {
  globalGraphQLErrorHandlingEnabled = true;
}
function API({
  exitOnError = true
} = {}) {
  const errorLink = (0, _error.onError)(({
    networkError,
    graphQLErrors
  }) => {
    if (networkError && 'statusCode' in networkError && networkError.statusCode === 401) {
      console.error(_chalk.default.red('Unauthorized:'), 'You are unauthorized to perform this request, please logout with `vip logout` then try again.');
      process.exit(1);
    }
    if (graphQLErrors?.length && globalGraphQLErrorHandlingEnabled) {
      graphQLErrors.forEach(error => {
        console.error(_chalk.default.red('Error:'), error.message);
      });
      if (exitOnError) {
        process.exit(1);
      }
    }
  });
  const withToken = (0, _context.setContext)(async () => {
    const token = (await _token.default.get()).raw;
    return {
      token
    };
  });
  const authLink = new _core2.ApolloLink((operation, forward) => {
    const ctx = operation.getContext();
    const headers = {
      'User-Agent': _env.default.userAgent,
      Authorization: `Bearer ${ctx.token}`,
      ...ctx.headers
    };
    operation.setContext({
      headers
    });
    return forward(operation);
  });
  const proxyAgent = (0, _proxyAgent.createProxyAgent)(API_URL);
  const httpLink = new _core.HttpLink({
    uri: API_URL,
    fetch: _http.default,
    fetchOptions: {
      agent: proxyAgent
    }
  });
  return new _core.ApolloClient({
    link: _core2.ApolloLink.from([withToken, errorLink, authLink, httpLink]),
    cache: new _core.InMemoryCache({
      typePolicies: {
        WPSite: {
          // By default the cache key is assumed to be `id` which is not globally unique.
          // So we are using `id` + `homeUrl` to prevent clashing keys.
          // Change this to `blogId` + `homeUrl` when we switch to using wpSitesSDS
          keyFields: ['id', 'homeUrl']
        }
      }
    })
  });
}