"use strict";

exports.__esModule = true;
exports.appQuery = void 0;
exports.validateName = validateName;
exports.validateNameWithMessage = validateNameWithMessage;
var _chalk = _interopRequireDefault(require("chalk"));
var _apiDelete = _interopRequireDefault(require("./api-delete"));
exports.deleteEnvVar = _apiDelete.default;
var _apiGet = _interopRequireDefault(require("./api-get"));
exports.getEnvVar = _apiGet.default;
var _apiGetAll = _interopRequireDefault(require("./api-get-all"));
exports.getEnvVars = _apiGetAll.default;
var _apiList = _interopRequireDefault(require("./api-list"));
exports.listEnvVars = _apiList.default;
var _apiSet = _interopRequireDefault(require("./api-set"));
exports.setEnvVar = _apiSet.default;
var _logging = require("../../lib/envvar/logging");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// Reexport for convenience

// The subquery for environments lets users choose any environment, including production.
const appQuery = exports.appQuery = `
	id
	name
	environments {
		id
		appId
		name
		primaryDomain {
			name
		}
		type
	}
	organization {
		id
		name
	}
`;
function validateName(name) {
  const sanitizedName = name.trim().toUpperCase().replace(/[^A-Z0-9_]/g, '');
  return name === sanitizedName && /^[A-Z]/.test(sanitizedName);
}
function validateNameWithMessage(name) {
  (0, _logging.debug)(`Validating environment variable name "${name}"`);
  if (!validateName(name)) {
    const message = ['Environment variable name must consist of A-Z, 0-9, or _,', 'and must start with an uppercase letter.'].join('\n');
    console.log(_chalk.default.bold.red(message));
    return false;
  }
  return true;
}